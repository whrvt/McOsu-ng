From c80bca334dca15fc19407f2d66ee680618f30860 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 9 Jun 2025 04:15:03 -0700
Subject: [PATCH] use cpp17 threads

---
 include/soloud_thread.h    |  95 +++---
 src/core/soloud_thread.cpp | 600 +++++++++++++++++++++----------------
 2 files changed, 397 insertions(+), 298 deletions(-)

diff --git a/include/soloud_thread.h b/include/soloud_thread.h
index 5664689..da43261 100644
--- a/include/soloud_thread.h
+++ b/include/soloud_thread.h
@@ -25,60 +25,59 @@ freely, subject to the following restrictions:
 #ifndef SOLOUD_THREAD_H
 #define SOLOUD_THREAD_H
 
-#include "soloud.h"
-
 namespace SoLoud
 {
-	namespace Thread
-	{
-		typedef void (*threadFunction)(void *aParam);
+namespace Thread
+{
+typedef void (*threadFunction)(void *aParam);
 
-        struct ThreadHandleData;
-        typedef ThreadHandleData* ThreadHandle;
+struct ThreadHandleData;
+typedef ThreadHandleData *ThreadHandle;
 
-		void * createMutex();
-		void destroyMutex(void *aHandle);
-		void lockMutex(void *aHandle);
-		void unlockMutex(void *aHandle);
+void *createMutex();
+void destroyMutex(void *aHandle);
+void lockMutex(void *aHandle);
+void unlockMutex(void *aHandle);
 
-		ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter);
+ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter);
 
-		void sleep(int aMSec);
-        void wait(ThreadHandle aThreadHandle);
-        void release(ThreadHandle aThreadHandle);
-		int getTimeMillis();
+void sleep(int aMSec);
+void wait(ThreadHandle aThreadHandle);
+void release(ThreadHandle aThreadHandle);
+int getTimeMillis();
 
 #define MAX_THREADPOOL_TASKS 1024
 
-		class PoolTask
-		{
-		public:
-			virtual void work() = 0;
-		};
-
-		class Pool
-		{
-		public:
-			// Initialize and run thread pool. For thread count 0, work is done at addWork call.
-			void init(int aThreadCount);
-			// Ctor, sets known state
-			Pool();
-			// Dtor. Waits for the threads to finish. Work may be unfinished.
-			~Pool();
-			// Add work to work list. Object is not automatically deleted when work is done.
-			void addWork(PoolTask *aTask);
-			// Called from worker thread to get a new task. Returns null if no work available.
-			PoolTask *getWork();
-		public:
-			int mThreadCount; // number of threads
-			ThreadHandle *mThread; // array of thread handles
-			void *mWorkMutex; // mutex to protect task array/maxtask
-			PoolTask *mTaskArray[MAX_THREADPOOL_TASKS]; // pointers to tasks
-			int mMaxTask; // how many tasks are pending
-			int mRobin; // cyclic counter, used to pick jobs for threads
-			volatile int mRunning; // running flag, used to flag threads to stop
-		};
-	}
-}
-
-#endif
\ No newline at end of file
+class PoolTask
+{
+public:
+	virtual void work() = 0;
+};
+
+class Pool
+{
+public:
+	// Initialize and run thread pool. For thread count 0, work is done at addWork call.
+	void init(int aThreadCount);
+	// Ctor, sets known state
+	Pool();
+	// Dtor. Waits for the threads to finish. Work may be unfinished.
+	~Pool();
+	// Add work to work list. Object is not automatically deleted when work is done.
+	void addWork(PoolTask *aTask);
+	// Called from worker thread to get a new task. Returns null if no work available.
+	PoolTask *getWork();
+
+public:
+	int mThreadCount;                           // number of threads
+	ThreadHandle *mThread;                      // array of thread handles
+	void *mWorkMutex;                           // mutex to protect task array/maxtask
+	PoolTask *mTaskArray[MAX_THREADPOOL_TASKS]; // pointers to tasks
+	int mMaxTask;                               // how many tasks are pending
+	int mRobin;                                 // cyclic counter, used to pick jobs for threads
+	volatile int mRunning;                      // running flag, used to flag threads to stop
+};
+} // namespace Thread
+} // namespace SoLoud
+
+#endif
diff --git a/src/core/soloud_thread.cpp b/src/core/soloud_thread.cpp
index d3dbe4f..ae3ea06 100644
--- a/src/core/soloud_thread.cpp
+++ b/src/core/soloud_thread.cpp
@@ -22,309 +22,409 @@ freely, subject to the following restrictions:
    distribution.
 */
 
-#if defined(_WIN32)||defined(_WIN64)
+#if __cplusplus >= 201703L
+#include <chrono>
+#include <mutex>
+#include <thread>
+#else
+#if defined(_WIN32) || defined(_WIN64)
 #include <windows.h>
 #else
 #include <inttypes.h>
 #include <pthread.h>
-#include <unistd.h>
 #include <time.h>
+#include <unistd.h>
+#endif
 #endif
 
-#include "soloud.h"
 #include "soloud_thread.h"
 
 namespace SoLoud
 {
-	namespace Thread
+namespace Thread
+{
+
+#if __cplusplus >= 201703L
+
+struct ThreadHandleData
+{
+	std::thread thread;
+};
+
+void *createMutex()
+{
+	return new std::mutex();
+}
+
+void destroyMutex(void *aHandle)
+{
+	std::mutex *mutex = static_cast<std::mutex *>(aHandle);
+	delete mutex;
+}
+
+void lockMutex(void *aHandle)
+{
+	std::mutex *mutex = static_cast<std::mutex *>(aHandle);
+	if (mutex)
+	{
+		mutex->lock();
+	}
+}
+
+void unlockMutex(void *aHandle)
+{
+	std::mutex *mutex = static_cast<std::mutex *>(aHandle);
+	if (mutex)
+	{
+		mutex->unlock();
+	}
+}
+
+struct soloud_thread_data
+{
+	threadFunction mFunc;
+	void *mParam;
+};
+
+static void threadfunc(soloud_thread_data *d)
+{
+	d->mFunc(d->mParam);
+	delete d;
+}
+
+ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter)
+{
+	soloud_thread_data *d = new soloud_thread_data;
+	d->mFunc = aThreadFunction;
+	d->mParam = aParameter;
+
+	ThreadHandleData *threadHandle = new ThreadHandleData;
+	threadHandle->thread = std::thread(threadfunc, d);
+	return threadHandle;
+}
+
+void sleep(int aMSec)
+{
+	std::this_thread::sleep_for(std::chrono::milliseconds(aMSec));
+}
+
+void wait(ThreadHandle aThreadHandle)
+{
+	if (aThreadHandle->thread.joinable())
 	{
+		aThreadHandle->thread.join();
+	}
+}
+
+void release(ThreadHandle aThreadHandle)
+{
+	delete aThreadHandle;
+}
+
+int getTimeMillis()
+{
+	auto now = std::chrono::steady_clock::now();
+	auto duration = now.time_since_epoch();
+	auto millis = std::chrono::duration_cast<std::chrono::milliseconds>(duration).count();
+	return static_cast<int>(millis);
+}
+
+#else
+
 #ifdef WINDOWS_VERSION
-        struct ThreadHandleData
-        {
-            HANDLE thread;
-        };
+struct ThreadHandleData
+{
+	HANDLE thread;
+};
 
-		void * createMutex()
-		{
-			CRITICAL_SECTION * cs = new CRITICAL_SECTION;
-			InitializeCriticalSectionAndSpinCount(cs, 100);
-			return (void*)cs;
-		}
+void *createMutex()
+{
+	CRITICAL_SECTION *cs = new CRITICAL_SECTION;
+	InitializeCriticalSectionAndSpinCount(cs, 100);
+	return (void *)cs;
+}
 
-		void destroyMutex(void *aHandle)
-		{
-			CRITICAL_SECTION *cs = (CRITICAL_SECTION*)aHandle;
-			DeleteCriticalSection(cs);
-			delete cs;
-		}
+void destroyMutex(void *aHandle)
+{
+	CRITICAL_SECTION *cs = (CRITICAL_SECTION *)aHandle;
+	DeleteCriticalSection(cs);
+	delete cs;
+}
 
-		void lockMutex(void *aHandle)
-		{
-			CRITICAL_SECTION *cs = (CRITICAL_SECTION*)aHandle;
-			if (cs)
-			{
-				EnterCriticalSection(cs);
-			}
-		}
+void lockMutex(void *aHandle)
+{
+	CRITICAL_SECTION *cs = (CRITICAL_SECTION *)aHandle;
+	if (cs)
+	{
+		EnterCriticalSection(cs);
+	}
+}
 
-		void unlockMutex(void *aHandle)
-		{
-			CRITICAL_SECTION *cs = (CRITICAL_SECTION*)aHandle;
-			if (cs)
-			{
-				LeaveCriticalSection(cs);
-			}
-		}
+void unlockMutex(void *aHandle)
+{
+	CRITICAL_SECTION *cs = (CRITICAL_SECTION *)aHandle;
+	if (cs)
+	{
+		LeaveCriticalSection(cs);
+	}
+}
 
-		struct soloud_thread_data
-		{
-			threadFunction mFunc;
-			void *mParam;
-		};
+struct soloud_thread_data
+{
+	threadFunction mFunc;
+	void *mParam;
+};
 
-		static DWORD WINAPI threadfunc(LPVOID d)
-		{
-			soloud_thread_data *p = (soloud_thread_data *)d;
-			p->mFunc(p->mParam);
-			delete p;
-			return 0;
-		}
+static DWORD WINAPI threadfunc(LPVOID d)
+{
+	soloud_thread_data *p = (soloud_thread_data *)d;
+	p->mFunc(p->mParam);
+	delete p;
+	return 0;
+}
 
-        ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter)
-		{
-			soloud_thread_data *d = new soloud_thread_data;
-			d->mFunc = aThreadFunction;
-			d->mParam = aParameter;
-			HANDLE h = CreateThread(NULL,0,threadfunc,d,0,NULL);
-            if (0 == h)
-            {
-                return 0;
-            }
-            ThreadHandleData *threadHandle = new ThreadHandleData;
-            threadHandle->thread = h;
-            return threadHandle;
-		}
+ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter)
+{
+	soloud_thread_data *d = new soloud_thread_data;
+	d->mFunc = aThreadFunction;
+	d->mParam = aParameter;
+	HANDLE h = CreateThread(NULL, 0, threadfunc, d, 0, NULL);
+	if (0 == h)
+	{
+		return 0;
+	}
+	ThreadHandleData *threadHandle = new ThreadHandleData;
+	threadHandle->thread = h;
+	return threadHandle;
+}
 
-		void sleep(int aMSec)
-		{
-			Sleep(aMSec);
-		}
+void sleep(int aMSec)
+{
+	Sleep(aMSec);
+}
 
-        void wait(ThreadHandle aThreadHandle)
-        {
-            WaitForSingleObject(aThreadHandle->thread, INFINITE);
-        }
+void wait(ThreadHandle aThreadHandle)
+{
+	WaitForSingleObject(aThreadHandle->thread, INFINITE);
+}
 
-        void release(ThreadHandle aThreadHandle)
-        {
-            CloseHandle(aThreadHandle->thread);
-            delete aThreadHandle;
-        }
+void release(ThreadHandle aThreadHandle)
+{
+	CloseHandle(aThreadHandle->thread);
+	delete aThreadHandle;
+}
 
-		int getTimeMillis()
-		{
-			return GetTickCount();
-		}
+int getTimeMillis()
+{
+	return GetTickCount();
+}
 
 #else // pthreads
-        struct ThreadHandleData
-        {
-            pthread_t thread;
-        };
+struct ThreadHandleData
+{
+	pthread_t thread;
+};
 
-		void * createMutex()
-		{
-			pthread_mutex_t *mutex;
-			mutex = new pthread_mutex_t;
-		
-			pthread_mutexattr_t attr;
-			pthread_mutexattr_init(&attr);
-
-			pthread_mutex_init(mutex, &attr);
-		
-			return (void*)mutex;
-		}
+void *createMutex()
+{
+	pthread_mutex_t *mutex;
+	mutex = new pthread_mutex_t;
 
-		void destroyMutex(void *aHandle)
-		{
-			pthread_mutex_t *mutex = (pthread_mutex_t*)aHandle;
+	pthread_mutexattr_t attr;
+	pthread_mutexattr_init(&attr);
 
-			if (mutex)
-			{
-				pthread_mutex_destroy(mutex);
-				delete mutex;
-			}
-		}
+	pthread_mutex_init(mutex, &attr);
 
-		void lockMutex(void *aHandle)
-		{
-			pthread_mutex_t *mutex = (pthread_mutex_t*)aHandle;
-			if (mutex)
-			{
-				pthread_mutex_lock(mutex);
-			}
-		}
+	return (void *)mutex;
+}
 
-		void unlockMutex(void *aHandle)
-		{
-			pthread_mutex_t *mutex = (pthread_mutex_t*)aHandle;
-			if (mutex)
-			{
-				pthread_mutex_unlock(mutex);
-			}
-		}
+void destroyMutex(void *aHandle)
+{
+	pthread_mutex_t *mutex = (pthread_mutex_t *)aHandle;
 
-		struct soloud_thread_data
-		{
-			threadFunction mFunc;
-			void *mParam;
-		};
+	if (mutex)
+	{
+		pthread_mutex_destroy(mutex);
+		delete mutex;
+	}
+}
 
-		static void * threadfunc(void * d)
-		{
-			soloud_thread_data *p = (soloud_thread_data *)d;
-			p->mFunc(p->mParam);
-			delete p;
-			return 0;
-		}
+void lockMutex(void *aHandle)
+{
+	pthread_mutex_t *mutex = (pthread_mutex_t *)aHandle;
+	if (mutex)
+	{
+		pthread_mutex_lock(mutex);
+	}
+}
 
-		ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter)
-		{
-			soloud_thread_data *d = new soloud_thread_data;
-			d->mFunc = aThreadFunction;
-			d->mParam = aParameter;
+void unlockMutex(void *aHandle)
+{
+	pthread_mutex_t *mutex = (pthread_mutex_t *)aHandle;
+	if (mutex)
+	{
+		pthread_mutex_unlock(mutex);
+	}
+}
 
-			ThreadHandleData *threadHandle = new ThreadHandleData;
-			pthread_create(&threadHandle->thread, NULL, threadfunc, (void*)d);
-            return threadHandle;
-		}
+struct soloud_thread_data
+{
+	threadFunction mFunc;
+	void *mParam;
+};
 
-		void sleep(int aMSec)
-		{
-			//usleep(aMSec * 1000);
-			struct timespec req = {0};
-			req.tv_sec = 0;
-			req.tv_nsec = aMSec * 1000000L;
-			nanosleep(&req, (struct timespec *)NULL);
-		}
+static void *threadfunc(void *d)
+{
+	soloud_thread_data *p = (soloud_thread_data *)d;
+	p->mFunc(p->mParam);
+	delete p;
+	return 0;
+}
 
-        void wait(ThreadHandle aThreadHandle)
-        {
-            pthread_join(aThreadHandle->thread, 0);
-        }
+ThreadHandle createThread(threadFunction aThreadFunction, void *aParameter)
+{
+	soloud_thread_data *d = new soloud_thread_data;
+	d->mFunc = aThreadFunction;
+	d->mParam = aParameter;
 
-        void release(ThreadHandle aThreadHandle)
-        {
-            delete aThreadHandle;
-        }
+	ThreadHandleData *threadHandle = new ThreadHandleData;
+	pthread_create(&threadHandle->thread, NULL, threadfunc, (void *)d);
+	return threadHandle;
+}
 
-		int getTimeMillis()
-		{
-			struct timespec spec;
-			clock_gettime(CLOCK_REALTIME, &spec);
-			return spec.tv_sec * 1000 + (int)(spec.tv_nsec / 1.0e6);
-		}
+void sleep(int aMSec)
+{
+	// usleep(aMSec * 1000);
+	struct timespec req = {0};
+	req.tv_sec = 0;
+	req.tv_nsec = aMSec * 1000000L;
+	nanosleep(&req, (struct timespec *)NULL);
+}
+
+void wait(ThreadHandle aThreadHandle)
+{
+	pthread_join(aThreadHandle->thread, 0);
+}
+
+void release(ThreadHandle aThreadHandle)
+{
+	delete aThreadHandle;
+}
+
+int getTimeMillis()
+{
+	struct timespec spec;
+	clock_gettime(CLOCK_REALTIME, &spec);
+	return spec.tv_sec * 1000 + (int)(spec.tv_nsec / 1.0e6);
+}
 #endif
 
-		static void poolWorker(void *aParam)
-		{
-			Pool *myPool = (Pool*)aParam;
-			while (myPool->mRunning)
-			{
-				PoolTask *t = myPool->getWork();
-				if (!t)
-				{
-					sleep(1);
-				}
-				else
-				{
-					t->work();
-				}
-			}
-		}
+#endif // __cplusplus >= 201703L
 
-		Pool::Pool()
+static void poolWorker(void *aParam)
+{
+	Pool *myPool = (Pool *)aParam;
+	while (myPool->mRunning)
+	{
+		PoolTask *t = myPool->getWork();
+		if (!t)
 		{
-			mRunning = 0;
-			mThreadCount = 0;
-			mThread = 0;
-			mWorkMutex = 0;
-			mRobin = 0;
-			mMaxTask = 0;
-			for (int i = 0; i < MAX_THREADPOOL_TASKS; i++)
-				mTaskArray[i] = 0;
+			sleep(1);
 		}
-
-		Pool::~Pool()
+		else
 		{
-			mRunning = 0;
-			int i;
-			for (i = 0; i < mThreadCount; i++)
-			{
-				wait(mThread[i]);
-				release(mThread[i]);
-			}
-			delete[] mThread;
-			if (mWorkMutex)
-				destroyMutex(mWorkMutex);
+			t->work();
 		}
+	}
+}
+
+Pool::Pool()
+{
+	mRunning = 0;
+	mThreadCount = 0;
+	mThread = 0;
+	mWorkMutex = 0;
+	mRobin = 0;
+	mMaxTask = 0;
+	for (int i = 0; i < MAX_THREADPOOL_TASKS; i++)
+		mTaskArray[i] = 0;
+}
 
-		void Pool::init(int aThreadCount)
+Pool::~Pool()
+{
+	mRunning = 0;
+	int i;
+	for (i = 0; i < mThreadCount; i++)
+	{
+		wait(mThread[i]);
+		release(mThread[i]);
+	}
+	delete[] mThread;
+	if (mWorkMutex)
+		destroyMutex(mWorkMutex);
+}
+
+void Pool::init(int aThreadCount)
+{
+	if (aThreadCount > 0)
+	{
+		mMaxTask = 0;
+		mWorkMutex = createMutex();
+		mRunning = 1;
+		mThreadCount = aThreadCount;
+		mThread = new ThreadHandle[aThreadCount];
+		int i;
+		for (i = 0; i < mThreadCount; i++)
 		{
-			if (aThreadCount > 0)
-			{
-				mMaxTask = 0;
-				mWorkMutex = createMutex();
-				mRunning = 1;
-				mThreadCount = aThreadCount;
-				mThread = new ThreadHandle[aThreadCount];
-				int i;
-				for (i = 0; i < mThreadCount; i++)
-				{
-					mThread[i] = createThread(poolWorker, this);
-				}
-			}
+			mThread[i] = createThread(poolWorker, this);
 		}
+	}
+}
 
-		void Pool::addWork(PoolTask *aTask)
+void Pool::addWork(PoolTask *aTask)
+{
+	if (mThreadCount == 0)
+	{
+		aTask->work();
+	}
+	else
+	{
+		if (mWorkMutex)
+			lockMutex(mWorkMutex);
+		if (mMaxTask == MAX_THREADPOOL_TASKS)
 		{
-			if (mThreadCount == 0)
-			{
-				aTask->work();
-			}
-			else
-			{
-				if (mWorkMutex) lockMutex(mWorkMutex);
-				if (mMaxTask == MAX_THREADPOOL_TASKS)
-				{
-					// If we're at max tasks, do the task on calling thread 
-					// (we're in trouble anyway, might as well slow down adding more work)
-					if (mWorkMutex) unlockMutex(mWorkMutex);
-					aTask->work();
-				}
-				else
-				{
-					mTaskArray[mMaxTask] = aTask;
-					mMaxTask++;
-					if (mWorkMutex) unlockMutex(mWorkMutex);
-				}
-			}
+			// If we're at max tasks, do the task on calling thread
+			// (we're in trouble anyway, might as well slow down adding more work)
+			if (mWorkMutex)
+				unlockMutex(mWorkMutex);
+			aTask->work();
 		}
-
-		PoolTask * Pool::getWork()
+		else
 		{
-			PoolTask *t = 0;
-			if (mWorkMutex) lockMutex(mWorkMutex);
-			if (mMaxTask > 0)
-			{
-				int r = mRobin % mMaxTask;
-				mRobin++;
-				t = mTaskArray[r];
-				mTaskArray[r] = mTaskArray[mMaxTask - 1];
-				mMaxTask--;
-			}
-			if (mWorkMutex) unlockMutex(mWorkMutex);
-			return t;
+			mTaskArray[mMaxTask] = aTask;
+			mMaxTask++;
+			if (mWorkMutex)
+				unlockMutex(mWorkMutex);
 		}
 	}
 }
+
+PoolTask *Pool::getWork()
+{
+	PoolTask *t = 0;
+	if (mWorkMutex)
+		lockMutex(mWorkMutex);
+	if (mMaxTask > 0)
+	{
+		int r = mRobin % mMaxTask;
+		mRobin++;
+		t = mTaskArray[r];
+		mTaskArray[r] = mTaskArray[mMaxTask - 1];
+		mMaxTask--;
+	}
+	if (mWorkMutex)
+		unlockMutex(mWorkMutex);
+	return t;
+}
+} // namespace Thread
+} // namespace SoLoud
-- 
2.49.0


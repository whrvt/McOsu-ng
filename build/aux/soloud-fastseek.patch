From bc658d99db4dfd997aaa466e19a783d700fcd100 Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Mon, 19 May 2025 11:46:37 -0700
Subject: [PATCH] soloud fastseek

---
 include/soloud_wavstream.h               |   9 +-
 src/audiosource/wav/soloud_wavstream.cpp | 132 ++++++++++++++++++++---
 2 files changed, 128 insertions(+), 13 deletions(-)

diff --git a/include/soloud_wavstream.h b/include/soloud_wavstream.h
index 0f46e14..1f8e86a 100644
--- a/include/soloud_wavstream.h
+++ b/include/soloud_wavstream.h
@@ -34,6 +34,8 @@ struct drflac;
 #endif
 #ifndef dr_mp3_h
 struct drmp3;
+struct drmp3_seek_point;
+typedef unsigned int drmp3_uint32;
 #endif
 #ifndef dr_wav_h
 struct drwav;
@@ -62,6 +64,7 @@ namespace SoLoud
 	public:
 		WavStreamInstance(WavStream *aParent);
 		virtual unsigned int getAudio(float *aBuffer, unsigned int aSamplesToRead, unsigned int aBufferSize);
+		virtual result seek(double aSeconds, float* mScratch, unsigned int mScratchSize);
 		virtual result rewind();
 		virtual bool hasEnded();
 		virtual ~WavStreamInstance();
@@ -88,13 +91,17 @@ namespace SoLoud
 		File *mStreamFile;
 		unsigned int mSampleCount;
 
+		// mp3 seek tables
+		drmp3_seek_point* mMp3SeekPoints;
+		drmp3_uint32 mMp3SeekPointCount;
+
 		WavStream();
 		virtual ~WavStream();
 		result load(const char *aFilename);
 		result loadMem(const unsigned char *aData, unsigned int aDataLen, bool aCopy = false, bool aTakeOwnership = true);
 		result loadToMem(const char *aFilename);
 		result loadFile(File *aFile);
-		result loadFileToMem(File *aFile);		
+		result loadFileToMem(File *aFile);
 		virtual AudioSourceInstance *createInstance();
 		time getLength();
 
diff --git a/src/audiosource/wav/soloud_wavstream.cpp b/src/audiosource/wav/soloud_wavstream.cpp
index e8f0d21..fc862cc 100644
--- a/src/audiosource/wav/soloud_wavstream.cpp
+++ b/src/audiosource/wav/soloud_wavstream.cpp
@@ -111,7 +111,7 @@ namespace SoLoud
 		{
 			return;
 		}
-		
+
 		if (mFile)
 		{
 			if (mParent->mFiletype == WAVSTREAM_WAV)
@@ -166,6 +166,10 @@ namespace SoLoud
 						delete mFile;
 					mFile = 0;
 				}
+				else if (mParent->mMp3SeekPointCount > 0 && mParent->mMp3SeekPoints != nullptr)
+				{
+					drmp3_bind_seek_table(mCodec.mMp3, mParent->mMp3SeekPointCount, mParent->mMp3SeekPoints);
+				}
 			}
 			else
 			{
@@ -217,7 +221,7 @@ namespace SoLoud
 	}
 
 	static int getOggData(float **aOggOutputs, float *aBuffer, int aSamples, int aPitch, int aFrameSize, int aFrameOffset, int aChannels)
-	{			
+	{
 		if (aFrameSize <= 0)
 			return 0;
 
@@ -235,10 +239,10 @@ namespace SoLoud
 		return samples;
 	}
 
-	
+
 
 	unsigned int WavStreamInstance::getAudio(float *aBuffer, unsigned int aSamplesToRead, unsigned int aBufferSize)
-	{			
+	{
 		unsigned int offset = 0;
 		float tmp[512 * MAX_CHANNELS];
 		if (mFile == NULL)
@@ -339,6 +343,71 @@ namespace SoLoud
 		return aSamplesToRead;
 	}
 
+	result WavStreamInstance::seek(double aSeconds, float* mScratch, unsigned int mScratchSize)
+	{
+		if (mParent->mFiletype == WAVSTREAM_MP3 && mCodec.mMp3)
+		{
+			drmp3_uint64 targetFrame = (drmp3_uint64)floor(aSeconds * mCodec.mMp3->sampleRate);
+			if (drmp3_seek_to_pcm_frame(mCodec.mMp3, targetFrame))
+			{
+				// Since the position that we just sought to might not be *exactly*
+				// the position we asked for, we're re-calculating the position just
+				// for the sake of correctness.
+				mOffset = (unsigned int)mCodec.mMp3->currentPCMFrame;
+				double newPosition = static_cast<double>(mOffset) / mBaseSamplerate;
+				mStreamPosition = newPosition;
+				return SO_NO_ERROR;
+			}
+			return UNKNOWN_ERROR;
+		}
+		else if (mParent->mFiletype == WAVSTREAM_OGG && mCodec.mOgg)
+		{
+			mOggFrameSize = 0;
+			mOggFrameOffset = 0;
+
+			int pos = (int)floor(mBaseSamplerate * aSeconds);
+
+			if (stb_vorbis_seek(mCodec.mOgg, pos) == 1)
+			{
+				/* Same as above */
+				mOffset = stb_vorbis_get_sample_offset(mCodec.mOgg);
+				double newPosition = static_cast<double>(mOffset) / mBaseSamplerate;
+				mStreamPosition = newPosition;
+				return SO_NO_ERROR;
+			}
+			return UNKNOWN_ERROR;
+		}
+		else if (mParent->mFiletype == WAVSTREAM_WAV && mCodec.mWav)
+		{
+			drwav_uint64 targetFrame = (drwav_uint64)floor(aSeconds * mCodec.mWav->sampleRate);
+
+			if (drwav_seek_to_pcm_frame(mCodec.mWav, targetFrame))
+			{
+				/* Same as above */
+				mOffset = (unsigned int)mCodec.mWav->readCursorInPCMFrames;
+				double newPosition = static_cast<double>(mOffset) / mBaseSamplerate;
+				mStreamPosition = newPosition;
+				return SO_NO_ERROR;
+			}
+			return UNKNOWN_ERROR;
+		}
+		else if (mParent->mFiletype == WAVSTREAM_FLAC && mCodec.mFlac)
+		{
+			drflac_uint64 targetFrame = (drflac_uint64)floor(aSeconds * mCodec.mFlac->sampleRate);
+
+			if (drflac_seek_to_pcm_frame(mCodec.mFlac, targetFrame))
+			{
+				/* Same as above */
+				mOffset = (unsigned int)mCodec.mFlac->currentPCMFrame;
+				double newPosition = static_cast<double>(mOffset) / mBaseSamplerate;
+				mStreamPosition = newPosition;
+				return SO_NO_ERROR;
+			}
+			return UNKNOWN_ERROR;
+		}
+		return AudioSourceInstance::seek(aSeconds, mScratch, mScratchSize);
+	}
+
 	result WavStreamInstance::rewind()
 	{
 		switch (mParent->mFiletype)
@@ -379,6 +448,11 @@ namespace SoLoud
 		{
 			return 1;
 		}
+		else if (mParent->mFiletype == WAVSTREAM_MP3 && mCodec.mMp3 && mCodec.mMp3->atEnd) // no idea
+		{
+			mOffset = mParent->mSampleCount;
+			return 1;
+		}
 		return 0;
 	}
 
@@ -389,15 +463,18 @@ namespace SoLoud
 		mFiletype = WAVSTREAM_WAV;
 		mMemFile = 0;
 		mStreamFile = 0;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
 	}
-	
+
 	WavStream::~WavStream()
 	{
 		stop();
 		delete[] mFilename;
 		delete mMemFile;
+		delete[] mMp3SeekPoints;
 	}
-	
+
 #define MAKEDWORD(a,b,c,d) (((d) << 24) | ((c) << 16) | ((b) << 8) | (a))
 
 	result WavStream::loadwav(File * fp)
@@ -453,7 +530,7 @@ namespace SoLoud
 
 		if (decoder == NULL)
 			return FILE_LOAD_FAILED;
-		
+
 		mChannels = decoder->channels;
 		if (mChannels > MAX_CHANNELS)
 		{
@@ -475,7 +552,6 @@ namespace SoLoud
 		if (!drmp3_init(&decoder, drmp3_read_func, drmp3_seek_func, NULL, NULL, (void*)fp, NULL))
 			return FILE_LOAD_FAILED;
 
-
 		mChannels = decoder.channels;
 		if (mChannels > MAX_CHANNELS)
 		{
@@ -487,6 +563,26 @@ namespace SoLoud
 		mBaseSamplerate = (float)decoder.sampleRate;
 		mSampleCount = (unsigned int)samples;
 		mFiletype = WAVSTREAM_MP3;
+
+		delete[] mMp3SeekPoints;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
+
+		double fileLengthSeconds = static_cast<double>(mSampleCount) / mBaseSamplerate;
+		double seekPointIntervalSeconds = 5.0; // 1 seek point every 5 seconds
+
+		// cap seek points to avoid memory blowup
+		mMp3SeekPointCount = (drmp3_uint32)((fileLengthSeconds / seekPointIntervalSeconds) + 1);
+		mMp3SeekPointCount = mMp3SeekPointCount < 16 ? 16 : mMp3SeekPointCount;
+		mMp3SeekPointCount = mMp3SeekPointCount > 1000 ? 1000 : mMp3SeekPointCount;
+
+		mMp3SeekPoints = new drmp3_seek_point[mMp3SeekPointCount];
+		if (!drmp3_calculate_seek_points(&decoder, &mMp3SeekPointCount, mMp3SeekPoints)) {
+			delete[] mMp3SeekPoints;
+			mMp3SeekPoints = nullptr;
+			mMp3SeekPointCount = 0;
+		}
+
 		drmp3_uninit(&decoder);
 
 		return SO_NO_ERROR;
@@ -496,6 +592,9 @@ namespace SoLoud
 	{
 		delete[] mFilename;
 		delete mMemFile;
+		delete[] mMp3SeekPoints;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
 		mMemFile = 0;
 		mFilename = 0;
 		mSampleCount = 0;
@@ -503,12 +602,12 @@ namespace SoLoud
 		int res = fp.open(aFilename);
 		if (res != SO_NO_ERROR)
 			return res;
-		
+
 		int len = (int)strlen(aFilename);
-		mFilename = new char[len+1];		
+		mFilename = new char[len+1];
 		memcpy(mFilename, aFilename, len);
 		mFilename[len] = 0;
-		
+
 		res = parse(&fp);
 
 		if (res != SO_NO_ERROR)
@@ -525,6 +624,9 @@ namespace SoLoud
 	{
 		delete[] mFilename;
 		delete mMemFile;
+		delete[] mMp3SeekPoints;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
 		mStreamFile = 0;
 		mMemFile = 0;
 		mFilename = 0;
@@ -569,6 +671,9 @@ namespace SoLoud
 	{
 		delete[] mFilename;
 		delete mMemFile;
+		delete[] mMp3SeekPoints;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
 		mStreamFile = 0;
 		mMemFile = 0;
 		mFilename = 0;
@@ -590,6 +695,9 @@ namespace SoLoud
 	{
 		delete[] mFilename;
 		delete mMemFile;
+		delete[] mMp3SeekPoints;
+		mMp3SeekPoints = nullptr;
+		mMp3SeekPointCount = 0;
 		mStreamFile = 0;
 		mMemFile = 0;
 		mFilename = 0;
@@ -656,6 +764,6 @@ namespace SoLoud
 	{
 		if (mBaseSamplerate == 0)
 			return 0;
-		return mSampleCount / mBaseSamplerate;
+		return static_cast<double>(mSampleCount) / mBaseSamplerate;
 	}
 };
-- 
2.49.0


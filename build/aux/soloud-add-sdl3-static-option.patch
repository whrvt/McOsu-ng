From 1512a54c6ceb66facac5ec5501c6c3408aa278bb Mon Sep 17 00:00:00 2001
From: William Horvath <william@horvath.blog>
Date: Sat, 17 May 2025 02:25:43 -0700
Subject: [PATCH] add sdl3 static option

---
 .gitignore                                    |   1 +
 build/genie.lua                               |  79 ++++++++-
 include/soloud.h                              |   7 +-
 include/soloud_c.h                            |   1 +
 include/soloud_internal.h                     |   3 +
 .../sdl3_static/soloud_sdl3_static.cpp        | 161 ++++++++++++++++++
 src/core/soloud.cpp                           |  21 ++-
 7 files changed, 267 insertions(+), 6 deletions(-)
 create mode 100644 src/backend/sdl3_static/soloud_sdl3_static.cpp

diff --git a/.gitignore b/.gitignore
index 08319ee..6b2c01d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+*patch
 Debug/
 _UpgradeReport_Files/
 *.ipch
diff --git a/build/genie.lua b/build/genie.lua
index 572187a..ca9b5ef 100644
--- a/build/genie.lua
+++ b/build/genie.lua
@@ -2,6 +2,7 @@ local WITH_SDL = 0
 local WITH_SDL2 = 0
 local WITH_SDL_STATIC = 0
 local WITH_SDL2_STATIC = 0
+local WITH_SDL3_STATIC = 0
 local WITH_PORTAUDIO = 0
 local WITH_OPENAL = 0
 local WITH_XAUDIO2 = 0
@@ -30,6 +31,7 @@ end
 
 local sdl_root       = "/libraries/sdl"
 local sdl2_root      = "/libraries/sdl2"
+local sdl3_root      = "/libraries/sdl3"
 local dxsdk_root     = os.getenv("DXSDK_DIR") and os.getenv("DXSDK_DIR") or "C:/Program Files (x86)/Microsoft DirectX SDK (June 2010)"
 local portaudio_root = "/libraries/portaudio"
 local openal_root    = "/libraries/openal"
@@ -40,6 +42,9 @@ local sdl_include       = sdl_root .. "/include"
 local sdl2_include      = sdl2_root .. "/include"
 local sdl2_lib_x86      = sdl2_root .. "/lib/x86"
 local sdl2_lib_x64      = sdl2_root .. "/lib/x64"
+local sdl3_include      = sdl3_root .. "/include"
+local sdl3_lib_x86      = sdl3_root .. "/lib/x86"
+local sdl3_lib_x64      = sdl3_root .. "/lib/x64"
 local dxsdk_include     = dxsdk_root .. "/include"
 local portaudio_include = portaudio_root .. "/include"
 local openal_include    = openal_root .. "/include"
@@ -109,6 +114,11 @@ newoption {
 	description = "Only include sdl2 that doesn't use dyndll in build"
 }
 
+newoption {
+	trigger		  = "with-sdl3static-only",
+	description = "Only include sdl3 that doesn't use dyndll in build"
+}
+
 newoption {
 	trigger		  = "with-coreaudio",
 	description = "Include OS X CoreAudio backend in build"
@@ -288,11 +298,12 @@ if _OPTIONS["with-sdl2static-only"] then
 	WITH_MINIAUDIO = 0
 end
 
-if _OPTIONS["with-sdl2static-only"] then
+if _OPTIONS["with-sdl3static-only"] then
 	WITH_SDL = 0
 	WITH_SDL2 = 0
 	WITH_SDL_STATIC = 0
-	WITH_SDL2_STATIC = 1
+	WITH_SDL2_STATIC = 0
+	WITH_SDL3_STATIC = 1
 	WITH_PORTAUDIO = 0
 	WITH_OPENAL = 0
 	WITH_XAUDIO2 = 0
@@ -400,6 +411,7 @@ print ("")
 print ("Active options:")
 print ("WITH_SDL        = ", WITH_SDL)
 print ("WITH_SDL2       = ", WITH_SDL2)
+print ("WITH_SDL3_STATIC= ", WITH_SDL3_STATIC)
 print ("WITH_PORTAUDIO  = ", WITH_PORTAUDIO)
 print ("WITH_OPENAL     = ", WITH_OPENAL)
 print ("WITH_XAUDIO2    = ", WITH_XAUDIO2)
@@ -737,6 +749,17 @@ if (WITH_SDL2_STATIC == 1) then
 	}
 end
 
+if (WITH_SDL3_STATIC == 1) then
+		defines { "WITH_SDL3_STATIC" }
+	files {
+	  "../src/backend/sdl3_static/**.c*"
+	  }
+	includedirs {
+	  "../include",
+	  sdl3_include
+	}
+end
+
 if (WITH_WASAPI == 1) then
 		defines { "WITH_WASAPI" }
 	files {
@@ -965,6 +988,58 @@ end
 
 -- 8< -- 8< -- 8< -- 8< -- 8< -- 8< -- 8< -- 8< -- 8< -- 8< --
 
+if (WITH_SDL3STATIC) then
+
+function sdl3_lib()
+    configuration { "x32" } 
+        libdirs { sdl3_lib_x86 }
+    configuration { "x64" } 
+        libdirs { sdl3_lib_x64 }
+    configuration {}
+end
+
+function CommonDemo(_name)
+  project(_name)
+	kind "WindowedApp"
+	language "C++"
+	files {
+	  "../demos/" .. _name .. "/**.c*"
+	  }
+	includedirs {
+	  "../include",
+	  "../demos/common",
+	  "../demos/common/imgui",
+	  "../demos/common/glew",
+	  sdl3_include
+	}
+	sdl3_lib()
+
+	defines { "GLEW_STATIC" }
+
+if (WITH_ALSA == 1) then
+	links {"asound"}
+end
+if (WITH_JACK == 1) then
+	links { "jack" }
+end
+if (WITH_COREAUDIO == 1) then
+	links {"AudioToolbox.framework"}
+end
+
+		links {"SoloudStatic", "SoloudDemoCommon", "SDL3main", "SDL3"}
+if (os.is("Windows")) then
+        links {"opengl32"}
+end
+		if (not os.is("windows")) then
+		  links { "pthread" }
+		  links { "dl" }
+		  links { "GL" }
+		end
+
+		targetname (_name)
+end
+end
+
 --
 --  The rest of the projects require SDL
 --
diff --git a/include/soloud.h b/include/soloud.h
index e3b47d8..38b24c7 100644
--- a/include/soloud.h
+++ b/include/soloud.h
@@ -50,13 +50,13 @@ freely, subject to the following restrictions:
 #ifdef WITH_SDL
 #undef WITH_SDL2
 #undef WITH_SDL1
-#define WITH_SDL1
-#define WITH_SDL2
+#define WITH_SDL3_STATIC
 #endif
 
 #ifdef WITH_SDL_STATIC
 #undef WITH_SDL1_STATIC
-#define WITH_SDL1_STATIC
+#undef WITH_SDL2_STATIC
+#define WITH_SDL3_STATIC
 #endif
 
 #ifndef M_PI
@@ -180,6 +180,7 @@ namespace SoLoud
 			AUTO = 0,
 			SDL1,
 			SDL2,
+			SDL3,
 			PORTAUDIO,
 			WINMM,
 			XAUDIO2,
diff --git a/include/soloud_c.h b/include/soloud_c.h
index bac939c..7f49475 100644
--- a/include/soloud_c.h
+++ b/include/soloud_c.h
@@ -41,6 +41,7 @@ enum SOLOUD_ENUMS
 	SOLOUD_AUTO = 0,
 	SOLOUD_SDL1 = 1,
 	SOLOUD_SDL2 = 2,
+	SOLOUD_SDL3 = 2,
 	SOLOUD_PORTAUDIO = 3,
 	SOLOUD_WINMM = 4,
 	SOLOUD_XAUDIO2 = 5,
diff --git a/include/soloud_internal.h b/include/soloud_internal.h
index c0589ab..0838ce6 100644
--- a/include/soloud_internal.h
+++ b/include/soloud_internal.h
@@ -41,6 +41,9 @@ namespace SoLoud
 	// SDL2 "non-dynamic" back-end initialization call
 	result sdl2static_init(SoLoud::Soloud *aSoloud, unsigned int aFlags = Soloud::CLIP_ROUNDOFF, unsigned int aSamplerate = 44100, unsigned int aBuffer = 2048, unsigned int aChannels = 2);
 
+	// SDL3 "non-dynamic" back-end initialization call
+	result sdl3static_init(SoLoud::Soloud *aSoloud, unsigned int aFlags = Soloud::CLIP_ROUNDOFF, unsigned int aSamplerate = 44100, unsigned int aBuffer = 2048, unsigned int aChannels = 2);
+
 	// OpenAL back-end initialization call
 	result openal_init(SoLoud::Soloud *aSoloud, unsigned int aFlags = Soloud::CLIP_ROUNDOFF, unsigned int aSamplerate = 44100, unsigned int aBuffer = 2048, unsigned int aChannels = 2);
 
diff --git a/src/backend/sdl3_static/soloud_sdl3_static.cpp b/src/backend/sdl3_static/soloud_sdl3_static.cpp
new file mode 100644
index 0000000..12e9d02
--- /dev/null
+++ b/src/backend/sdl3_static/soloud_sdl3_static.cpp
@@ -0,0 +1,161 @@
+/*
+SoLoud audio engine
+Copyright (c) 2013-2015 Jari Komppa
+
+SDL3 static entry point
+Copyright (c) 2025 William Horvath
+
+This software is provided 'as-is', without any express or implied
+warranty. In no event will the authors be held liable for any damages
+arising from the use of this software.
+
+Permission is granted to anyone to use this software for any purpose,
+including commercial applications, and to alter it and redistribute it
+freely, subject to the following restrictions:
+
+   1. The origin of this software must not be misrepresented; you must not
+   claim that you wrote the original software. If you use this software
+   in a product, an acknowledgment in the product documentation would be
+   appreciated but is not required.
+
+   2. Altered source versions must be plainly marked as such, and must not be
+   misrepresented as being the original software.
+
+   3. This notice may not be removed or altered from any source
+   distribution.
+*/
+#include <stdlib.h>
+
+#include "soloud.h"
+
+#if !defined(WITH_SDL3_STATIC)
+
+namespace SoLoud
+{
+    result sdl3static_init(SoLoud::Soloud *aSoloud, unsigned int aFlags, unsigned int aSamplerate, unsigned int aBuffer, unsigned int aChannels)
+    {
+        return NOT_IMPLEMENTED;
+    }
+}
+
+#else
+
+#include <SDL3/SDL_init.h>
+#include <SDL3/SDL_audio.h>
+#include <math.h>
+
+namespace SoLoud
+{
+    static bool gWeInitSDL = false;
+    static SDL_AudioDeviceID gAudioDeviceID = 0;
+    static float* gFloatBuffer = nullptr;
+    static short* gShortBuffer = nullptr;
+    static int gBufferSize = 0;
+    static SDL_AudioFormat gDeviceFormat = SDL_AUDIO_UNKNOWN;
+
+    static void soloud_sdl3static_postmix(void *userdata, const SDL_AudioSpec *spec, float *buffer, int buflen)
+    {
+        SoLoud::Soloud *soloud = (SoLoud::Soloud *)userdata;
+        if (!soloud) return;
+
+        int sampleFrames = buflen / (spec->channels * sizeof(float));
+        soloud->mix(buffer, sampleFrames);
+    }
+
+    static void soloud_sdl3static_deinit(SoLoud::Soloud *aSoloud)
+    {
+        if (gFloatBuffer) {
+            SDL_free(gFloatBuffer);
+            gFloatBuffer = nullptr;
+        }
+
+        if (gShortBuffer) {
+            SDL_free(gShortBuffer);
+            gShortBuffer = nullptr;
+        }
+
+        gBufferSize = 0;
+
+        if (gAudioDeviceID) {
+            SDL_SetAudioPostmixCallback(gAudioDeviceID, NULL, NULL);
+            SDL_CloseAudioDevice(gAudioDeviceID);
+            gAudioDeviceID = 0;
+        }
+
+        if (gWeInitSDL && SDL_WasInit(SDL_INIT_AUDIO)) {
+            SDL_QuitSubSystem(SDL_INIT_AUDIO);
+            gWeInitSDL = false;
+        }
+    }
+
+    result sdl3static_init(SoLoud::Soloud *aSoloud, unsigned int aFlags, unsigned int aSamplerate, unsigned int aBuffer, unsigned int aChannels)
+    {
+        if (!aSoloud) return INVALID_PARAMETER;
+
+        if (gAudioDeviceID) {
+            soloud_sdl3static_deinit(aSoloud);
+        }
+
+        if (!SDL_WasInit(SDL_INIT_AUDIO)) {
+            if (!SDL_InitSubSystem(SDL_INIT_AUDIO)) {
+                return UNKNOWN_ERROR;
+            }
+            gWeInitSDL = true;
+        }
+
+        SDL_AudioSpec preferredSpec;
+        bool hasPreferredFormat = SDL_GetAudioDeviceFormat(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK,
+                                                          &preferredSpec,
+                                                          NULL);
+
+        aSamplerate = hasPreferredFormat ? preferredSpec.freq : aSamplerate;
+        aChannels = hasPreferredFormat ? preferredSpec.channels : aChannels;
+
+        SDL_AudioSpec spec;
+        spec.freq = aSamplerate;
+        spec.channels = aChannels;
+        spec.format = SDL_AUDIO_F32;
+
+        gAudioDeviceID = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec);
+        if (gAudioDeviceID == 0) {
+            spec.format = SDL_AUDIO_S16;
+            gAudioDeviceID = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec);
+
+            if (gAudioDeviceID == 0) {
+                gAudioDeviceID = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, NULL);
+                if (gAudioDeviceID == 0) {
+                    return UNKNOWN_ERROR;
+                }
+            }
+        }
+
+        SDL_AudioSpec actualSpec;
+        int deviceSampleFrames;
+        if (!SDL_GetAudioDeviceFormat(gAudioDeviceID, &actualSpec, &deviceSampleFrames)) {
+            SDL_CloseAudioDevice(gAudioDeviceID);
+            gAudioDeviceID = 0;
+            return UNKNOWN_ERROR;
+        }
+
+        gDeviceFormat = actualSpec.format;
+
+        unsigned int soloudBufferSize = aBuffer;
+        if (deviceSampleFrames > 0 && deviceSampleFrames < (int)soloudBufferSize) {
+            // 2048 as in default/not set, otherwise respect the set choice if the queried buffer size is way too small
+            soloudBufferSize = deviceSampleFrames >= 16 ? deviceSampleFrames : (soloudBufferSize == 2048 ? 16 : soloudBufferSize);
+        }
+
+        if (!SDL_SetAudioPostmixCallback(gAudioDeviceID, soloud_sdl3static_postmix, aSoloud)) {
+            SDL_CloseAudioDevice(gAudioDeviceID);
+            gAudioDeviceID = 0;
+            return UNKNOWN_ERROR;
+        }
+
+        aSoloud->postinit_internal(actualSpec.freq, soloudBufferSize, aFlags, actualSpec.channels);
+        aSoloud->mBackendCleanupFunc = soloud_sdl3static_deinit;
+        aSoloud->mBackendString = "SDL3 (static)";
+
+        return 0;
+    }
+};
+#endif
diff --git a/src/core/soloud.cpp b/src/core/soloud.cpp
index e254457..96ecda1 100644
--- a/src/core/soloud.cpp
+++ b/src/core/soloud.cpp
@@ -44,7 +44,7 @@ freely, subject to the following restrictions:
 #if !defined(WITH_SDL2) && !defined(WITH_SDL1) && !defined(WITH_PORTAUDIO) && \
    !defined(WITH_OPENAL) && !defined(WITH_XAUDIO2) && !defined(WITH_WINMM) && \
    !defined(WITH_WASAPI) && !defined(WITH_OSS) && !defined(WITH_SDL1_STATIC) && \
-   !defined(WITH_SDL2_STATIC) && !defined(WITH_ALSA) && !defined(WITH_OPENSLES) && \
+   !defined(WITH_SDL2_STATIC) && !defined(WITH_SDL3_STATIC) && !defined(WITH_ALSA) && !defined(WITH_OPENSLES) && \
    !defined(WITH_NULL) && !defined(WITH_COREAUDIO) && !defined(WITH_VITA_HOMEBREW) &&\
    !defined(WITH_JACK) && !defined(WITH_NOSOUND) && !defined(WITH_MINIAUDIO)
 #error It appears you haven't enabled any of the back-ends. Please #define one or more of the WITH_ defines (or use premake) '
@@ -261,6 +261,25 @@ namespace SoLoud
 		}
 #endif
 
+#if defined(WITH_SDL3_STATIC)
+		if (!inited &&
+			(aBackend == Soloud::SDL3 ||
+			aBackend == Soloud::AUTO))
+		{
+			if (aBufferSize == Soloud::AUTO) buffersize = 2048;
+
+			int ret = sdl3static_init(this, aFlags, samplerate, buffersize, aChannels);
+			if (ret == 0)
+			{
+				inited = 1;
+				mBackendID = Soloud::SDL3;
+			}
+
+			if (ret != 0 && aBackend != Soloud::AUTO)
+				return ret;
+		}
+#endif
+
 #if defined(WITH_SDL2)
 		if (!inited &&
 			(aBackend == Soloud::SDL2 ||
-- 
2.49.0


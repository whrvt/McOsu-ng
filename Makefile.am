bin_PROGRAMS = McOsu-ng

# generated by ./autogen.sh
include $(top_srcdir)/src/Makefile.sources

CLEANFILES = \
	*.o \
	*.o.tmp \
	src/*.o.tmp \
	src/*.o \
	src/*/*.o \
	src/*/*/*.o \
	src/*/*/*/*.o \
	src/*/*.o.tmp \
	src/*/*/*.o.tmp \
	src/*/*/*/*.o.tmp \
	*~ \
	*.bak

comma:= ,# bruh

$(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).tar.gz "https://github.com/microsoft/mimalloc/archive/$(MIMALLOC_VERSION).tar.gz" && \
	touch $@

if BUILD_MIMALLOC
if WIN_PLATFORM
MIMALLOC_LIBS = -L$(DEPS_PREFIX)/lib -Wl,--whole-archive -l:libmimalloc.dll.a -Wl,--no-whole-archive -L$(DEPS_PREFIX)/bin -lmimalloc -lmimalloc-redirect$(if $(filter x86_64,$(host_cpu)),,32)
else
MIMALLOC_LIBS = $(DEPS_PREFIX)/lib/mimalloc$(if $(ENABLE_ASAN),-asan-debug,$(if $(ENABLE_DEBUG),-debug,)).o
endif
$(DEPS_PREFIX)/mimalloc.built: $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).source
	rm -rf $(DEPS_PREFIX)/mimalloc
	$(MKDIR_P) $(DEPS_PREFIX)/mimalloc && \
	$(TAR) xf $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).tar.gz -C $(DEPS_PREFIX)/mimalloc --strip-components=1 && \
	$(MKDIR_P) $(DEPS_PREFIX)/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)" && \
	cd $(DEPS_PREFIX)/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)" && \
	env PKG_CONFIG="$(PKG_CONFIG)" \
		LDFLAGS="$(LDFLAGS) -xnone" cmake \
		-D CMAKE_C_COMPILER="$(CC)" \
		-D CMAKE_C_FLAGS="$(CFLAGS) -Wno-array-bounds" \
		-D CMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		-D CMAKE_CXX_COMPILER="$(CXX)" \
		-D CMAKE_CXX_FLAGS="$(CXXFLAGS) -xc++ -Wno-array-bounds" \
		$(CMAKERCOPT) \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D MI_OPT_ARCH=$(if $(DISABLE_NATIVE),OFF,ON) \
		-D MI_OPT_SIMD=ON \
		-D MI_USE_CXX=ON \
		-D MI_BUILD_SHARED=$(if $(findstring linux,$(host_os)),OFF,ON) \
		-D MI_BUILD_TESTS=OFF \
		$(if $(findstring linux,$(host_os)),,-DMI_WIN_USE_FIXED_TLS=ON) \
		$(if $(ENABLE_ASAN),-DMI_LOCAL_DYNAMIC_TLS=ON -DMI_TRACK_ASAN=ON -DMI_DEBUG_UBSAN=ON,) \
		-D MI_INSTALL_TOPLEVEL=ON \
		-D MI_BUILD_STATIC=OFF \
		-D MI_BUILD_OBJECT=$(if $(findstring linux,$(host_os)),ON,OFF) ../.. && \
	make install
	touch $@
else
MIMALLOC_LIBS :=
$(DEPS_PREFIX)/mimalloc.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/SDL3-$(SDL3_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/SDL3-$(SDL3_VERSION).tar.gz "https://github.com/libsdl-org/SDL/archive/$(SDL3_VERSION).tar.gz" && \
	touch $@

if BUILD_SDL3
SDL3_CFLAGS += $(shell $(PKG_CONFIG) --cflags sdl3)
SDL3_LIBS += $(shell $(PKG_CONFIG) --libs sdl3)
$(DEPS_PREFIX)/SDL3.built: $(DEPS_CACHE)/SDL3-$(SDL3_VERSION).source $(DEPS_PREFIX)/FREETYPE2.built
	rm -rf $(DEPS_PREFIX)/SDL3
	$(MKDIR_P) $(DEPS_PREFIX)/SDL3 $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/SDL3-$(SDL3_VERSION).tar.gz -C $(DEPS_PREFIX)/SDL3 --strip-components=1 && \
	$(MKDIR_P) $(DEPS_PREFIX)/SDL3/build
	cd $(DEPS_PREFIX)/SDL3 && \
	patch -Np1<$(abs_top_srcdir)/build/aux/sdl-c23bool.patch && \
	PKG_CONFIG="$(PKG_CONFIG)" \
	CXX="$(CXX)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		$(if $(ENABLE_ASAN),-DSDL_ASAN=ON,) \
		-D SDL_HIDAPI_LIBUSB=OFF \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D SDL_SHARED="$(if $(SDL3_STATIC),OFF,ON)" \
		-D SDL_STATIC="$(if $(SDL3_STATIC),ON,OFF)" \
		-D CMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-D CMAKE_EXPORT_COMPILE_COMMANDS=ON \
		$(CMAKERCOPT) \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		-D SDL_RPATH=OFF \
		-D SDL_IBUS=OFF \
		-D SDL_CCACHE="$(if $(filter ccache,$(CCACHE)),ON,OFF)" \
		-D CMAKE_C_COMPILER="$(CC)" \
		-D CMAKE_C_FLAGS="$(CFLAGS) -Wno-error=incompatible-pointer-types" && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors sdl3
	touch $@
else
$(DEPS_PREFIX)/SDL3.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/SDL3_mixer-$(SDL3_MIXER_VERSION).source:
	rm -rf $(DEPS_CACHE)/SDL3_mixer && \
	$(MKDIR_P) $(DEPS_CACHE)/SDL3_mixer
	$(WGET) -qO $(DEPS_CACHE)/SDL3_mixer-$(SDL3_MIXER_VERSION).tar.gz "https://github.com/libsdl-org/SDL_mixer/archive/$(SDL3_MIXER_VERSION).tar.gz" && \
	$(TAR) xf $(DEPS_CACHE)/SDL3_mixer-$(SDL3_MIXER_VERSION).tar.gz -C $(DEPS_CACHE)/SDL3_mixer --strip-components=1 && \
	cd $(DEPS_CACHE)/SDL3_mixer/external && ./download.sh # cache vendored dependencies
	touch $@

$(DEPS_CACHE)/SoLoud-$(SOLOUD_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/SoLoud-$(SOLOUD_VERSION).tar.gz "https://github.com/jarikomppa/soloud/archive/$(SOLOUD_VERSION).tar.gz"
	touch $@

$(DEPS_CACHE)/SoundTouch-$(SOUNDTOUCH_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/SoundTouch-$(SOUNDTOUCH_VERSION).tar.gz "https://codeberg.org/soundtouch/soundtouch/archive/$(SOUNDTOUCH_VERSION).tar.gz"
	touch $@

if USE_SDLMIXER
AUDIO_CFLAGS += $(shell $(PKG_CONFIG) --cflags sdl3-mixer)
AUDIO_LIBS += $(shell $(PKG_CONFIG) --libs sdl3-mixer)
$(DEPS_PREFIX)/SDL3_mixer.built: $(DEPS_PREFIX)/SDL3.built $(DEPS_CACHE)/SDL3_mixer-$(SDL3_MIXER_VERSION).source
	rm -rf $(DEPS_PREFIX)/SDL3_mixer
	$(MKDIR_P) $(DEPS_PREFIX) $(DEPS_PREFIX)/lib/pkgconfig
	cp -r $(DEPS_CACHE)/SDL3_mixer $(DEPS_PREFIX)/SDL3_mixer && \
	$(MKDIR_P) $(DEPS_PREFIX)/SDL3_mixer/build
	cd $(DEPS_PREFIX)/SDL3_mixer && \
	PKG_CONFIG="$(PKG_CONFIG)" LDFLAGS="$(LDFLAGS)" \
	cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D CMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		-D CMAKE_C_COMPILER="$(CC)" \
		-D CMAKE_C_FLAGS="$(CFLAGS) -Wno-error=incompatible-pointer-types" \
		$(CMAKERCOPT) \
		-D SDLMIXER_GME=OFF \
		-D SDLMIXER_MIDI=OFF \
		-D SDLMIXER_STRICT=ON \
		-D SDLMIXER_VENDORED=ON \
		-D SDLMIXER_MP3=ON \
		-D SDLMIXER_MP3_MPG123=ON \
		-D BUILD_SHARED_LIBS="$(if $(STATICBUILD),OFF,ON)" \
		-D SDLMIXER_DEPS_SHARED="$(if $(STATICBUILD),OFF,ON)" && \
	cmake --build build && \
	cmake --install build
	$(SED) -i 's|Libs\.private.*|Libs.private: -lmpg123 -logg -lopus -lwavpack -lopusfile -lxmp|' $(DEPS_PREFIX)/lib/pkgconfig/sdl3-mixer.pc # wtf is this weird cmake issue?
	rm -rf $(DEPS_PREFIX)/lib/*SDL3_mixer$(if $(STATICBUILD),$(DLLEXT),.a)*
	$(PKG_CONFIG) --exists --print-errors sdl3-mixer
	touch $@
else
$(DEPS_PREFIX)/SDL3_mixer.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

if USE_SOLOUD
AUDIO_CFLAGS += $(shell $(PKG_CONFIG) --cflags soundtouch) -DST_NO_EXCEPTION_HANDLING $(if $(and $(filter i686,$(host_cpu)),$(DISABLE_NATIVE)),-DSOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS,)
AUDIO_LIBS += -L$(DEPS_PREFIX)/lib -lsoloud_static_x$(if $(filter x86_64,$(host_cpu)),64,86)$(if $(ENABLE_DEBUG),_d,) $(shell $(PKG_CONFIG) --libs soundtouch)
$(DEPS_PREFIX)/SoLoud.built: $(DEPS_CACHE)/SoLoud-$(SOLOUD_VERSION).source $(DEPS_PREFIX)/SDL3.built
	rm -rf $(DEPS_PREFIX)/SoLoud
	$(MKDIR_P) $(DEPS_PREFIX) $(DEPS_PREFIX)/include/soloud $(DEPS_PREFIX)/lib/pkgconfig $(DEPS_PREFIX)/SoLoud/build
	$(TAR) xf $(DEPS_CACHE)/SoLoud-$(SOLOUD_VERSION).tar.gz -C $(DEPS_PREFIX)/SoLoud --strip-components=1 && \
	cd $(DEPS_PREFIX)/SoLoud && \
	patch -Np1<$(abs_top_srcdir)/build/aux/revert-soloud.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-miniaudio-latest.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-miniaudio-settings.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-add-sdl3-static-option.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-fix-leak-setMaxActiveVoiceCount.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-bump-dr_libs.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-fastseek.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-null-getAudio.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-fix-global-volume-data-race.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-rework-resampler.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-ffmpeg-fallback.patch && \
	patch -Np1<$(abs_top_srcdir)/build/aux/soloud-use-cpp17-threads.patch && \
	$(SED) -i -e 's|#define VOICE_COUNT 1024|#define VOICE_COUNT 4095|g' include/soloud.h # raise max # concurrent voices from 1024 default to 4095 (hard limit)
	cd $(DEPS_PREFIX)/SoLoud/build && \
	$(SED) -i 's|"NoRTTI"$(comma)||g' genie.lua && \
	PKG_CONFIG="$(PKG_CONFIG) --static" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" \
	$(GENIE) --with-miniaudio-only \
			 --with-sdl3static-only \
			 --platform=x$(if $(filter x86_64,$(host_cpu)),64,32) \
			 --os=$(if $(findstring linux,$(host_os)),linux,windows) \
			 gmake && \
	cd gmake && $(SED) -i -e 's|^CC.*=.*||g' -e 's|^AR.*=.*||g' -e 's|^CXX.*=.*||g' SoloudStatic.make && \
	PKG_CONFIG="$(PKG_CONFIG) --static" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(SDL3_CFLAGS) $(CFLAGS)" CXXFLAGS="$(SDL3_CFLAGS) $(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" \
	PREFIX="$(DEPS_PREFIX)" RANLIB="$(RANLIB)" AR="$(AR)" config="$(if $(ENABLE_DEBUG),debug,release)" make SoloudStatic && \
	cp $(DEPS_PREFIX)/SoLoud/lib/libsoloud_static_x$(if $(filter x86_64,$(host_cpu)),64,86)$(if $(ENABLE_DEBUG),_d,).a $(DEPS_PREFIX)/lib/
	cp -r $(DEPS_PREFIX)/SoLoud/include/* $(DEPS_PREFIX)/include/soloud/ && \
	test -f $(DEPS_PREFIX)/lib/libsoloud_static_x$(if $(filter x86_64,$(host_cpu)),64,86)$(if $(ENABLE_DEBUG),_d,).a
	touch $@

$(DEPS_PREFIX)/SoundTouch.built: $(DEPS_CACHE)/SoundTouch-$(SOUNDTOUCH_VERSION).source
	rm -rf $(DEPS_PREFIX)/SoundTouch
	$(MKDIR_P) $(DEPS_PREFIX) $(DEPS_PREFIX)/include $(DEPS_PREFIX)/lib/pkgconfig $(DEPS_PREFIX)/SoundTouch/build
	$(TAR) xf $(DEPS_CACHE)/SoundTouch-$(SOUNDTOUCH_VERSION).tar.gz -C $(DEPS_PREFIX)/SoundTouch --strip-components=1 && \
	cd $(DEPS_PREFIX)/SoundTouch && \
	PKG_CONFIG="$(PKG_CONFIG)" LDFLAGS="$(LDFLAGS)" \
	cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D CMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		-D CMAKE_C_COMPILER="$(CC)" \
		-D CMAKE_C_FLAGS="$(CFLAGS) -DST_NO_EXCEPTION_HANDLING $(if $(and $(filter i686,$(host_cpu)),$(DISABLE_NATIVE)),-DSOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS,)" \
		-D CMAKE_CXX_COMPILER="$(CXX)" \
		-D CMAKE_CXX_FLAGS="$(CXXFLAGS) -DST_NO_EXCEPTION_HANDLING $(if $(and $(filter i686,$(host_cpu)),$(DISABLE_NATIVE)),-DSOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS,)" \
		$(CMAKERCOPT) \
		-D SOUNDSTRETCH=OFF \
		-D SOUNDTOUCH_DLL=OFF \
		-D OPENMP="$(if $(STATICBUILD),OFF,ON)" \
		-D BUILD_SHARED_LIBS="$(if $(STATICBUILD),OFF,ON)" && \
	cmake --build build && \
	cmake --install build
	rm -rf $(DEPS_PREFIX)/lib/*SoundTouch$(if $(STATICBUILD),$(DLLEXT),.a)*
	$(PKG_CONFIG) --env-only --exists --print-errors soundtouch
	touch $@
else
$(DEPS_PREFIX)/SoLoud.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
$(DEPS_PREFIX)/SoundTouch.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).tar.gz "https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/$(LIBJPEG_VERSION)/libjpeg-turbo-$(LIBJPEG_VERSION).tar.gz" && \
	touch $@

if BUILD_LIBJPEG
LIBJPEG_CFLAGS += $(shell $(PKG_CONFIG) --cflags libturbojpeg)
LIBJPEG_LIBS += $(shell $(PKG_CONFIG) --libs libturbojpeg)
$(DEPS_PREFIX)/libjpeg.built: $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).source
	rm -rf $(DEPS_PREFIX)/libjpeg
	$(MKDIR_P) $(DEPS_PREFIX)/libjpeg/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).tar.gz -C $(DEPS_PREFIX)/libjpeg --strip-components=1 && \
	cd $(DEPS_PREFIX)/libjpeg && \
	PKG_CONFIG="$(PKG_CONFIG)" \
	LDFLAGS="$(LDFLAGS)" cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D CMAKE_C_COMPILER="$(CC)" \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		$(CMAKERCOPT) \
		-DCMAKE_C_FLAGS="$(CFLAGS) -DNO_PUTENV -DNO_GETENV" \
		-DCMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-DCMAKE_ASM_NASM_FLAGS="-DPIC" \
		-DWITH_JPEG8=ON \
		-DCMAKE_ASM_NASM_OBJECT_FORMAT=$(NASMOBJ) \
		$(if $(filter x86_64,$(host_cpu)),-DWITH_SIMD=ON,$(if $(findstring gcc,$(CC)),-DWITH_SIMD=ON,-DWITH_SIMD=OFF)) \
		$(if $(STATICBUILD),-DENABLE_STATIC=ON -DENABLE_SHARED=OFF,-DENABLE_STATIC=OFF -DENABLE_SHARED=ON) && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors libturbojpeg
	touch $@
else
$(DEPS_PREFIX)/libjpeg.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/glm-$(GLM_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/glm-$(GLM_VERSION).tar.gz "https://github.com/g-truc/glm/archive/refs/tags/$(GLM_VERSION).tar.gz" && \
	touch $@

if BUILD_GLM
GLM_CFLAGS += -I$(DEPS_PREFIX)/include
$(DEPS_PREFIX)/glm.built: $(DEPS_CACHE)/glm-$(GLM_VERSION).source
	rm -rf $(DEPS_PREFIX)/glm
	$(MKDIR_P) $(DEPS_PREFIX)/glm/build $(DEPS_PREFIX)/include
	$(TAR) xf $(DEPS_CACHE)/glm-$(GLM_VERSION).tar.gz -C $(DEPS_PREFIX)/glm --strip-components=1 && \
	cd $(DEPS_PREFIX)/glm && \
	PKG_CONFIG="$(PKG_CONFIG)" \
	LDFLAGS="$(LDFLAGS)" cmake -S . -B build -G Ninja \
		-D GLM_BUILD_TESTS=OFF \
		-D GLM_BUILD_LIBRARY=OFF \
		-D BUILD_SHARED_LIBS=OFF \
		-D BUILD_STATIC_LIBS=OFF \
		-D GLM_ENABLE_CXX_20=ON \
		-D GLM_ENABLE_LANG_EXTENSIONS=ON \
		-D CMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D CMAKE_CXX_COMPILER="$(CXX)" \
		-D CMAKE_CXX_FLAGS="$(CXXFLAGS)" \
		-D CMAKE_SYSTEM_PROCESSOR="$(host_cpu)" && \
	cmake --build build && \
	cmake --install build
	test -f $(DEPS_PREFIX)/include/glm/glm.hpp
	touch $@
else
$(DEPS_PREFIX)/glm.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).tar.gz "https://github.com/pnggroup/libpng/archive/refs/tags/v$(LIBPNG_VERSION).tar.gz" && \
	touch $@

if BUILD_LIBPNG
LIBPNG_CFLAGS += $(shell $(PKG_CONFIG) --cflags libpng)
LIBPNG_LIBS += $(shell $(PKG_CONFIG) --libs libpng)
$(DEPS_PREFIX)/libpng.built: $(DEPS_PREFIX)/zlib.built $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).source
	rm -rf $(DEPS_PREFIX)/libpng
	$(MKDIR_P) $(DEPS_PREFIX)/libpng/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).tar.gz -C $(DEPS_PREFIX)/libpng --strip-components=1 && \
	cd $(DEPS_PREFIX)/libpng && PKG_CONFIG="$(PKG_CONFIG)" \
		./configure lt_cv_prog_gnu_ld=yes --host=$(host) --build=$(build) --prefix="$(DEPS_PREFIX)" \
		$(if $(STATICBUILD),--enable-static --disable-shared,--enable-shared --disable-static) \
		--disable-tools --disable-tests --with-gnu-ld $(if $(or $(DISABLE_NATIVE),$(ENABLE_DEBUG)),,--enable-hardware-optimizations=on) \
			CC="$(CC) $(shell $(PKG_CONFIG) --cflags zlib)" RANLIB="$(RANLIB)" AR="$(AR)" CXX="$(CXX)" LD="$(LD)" \
			CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS) $(shell $(PKG_CONFIG) --libs zlib)" && \
	$(MAKE) && \
	$(MAKE) install
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors libpng
	touch $@
else
$(DEPS_PREFIX)/libpng.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).tar.gz "https://sourceware.org/pub/bzip2/bzip2-$(BZIP2_VERSION).tar.gz" && \
	touch $@

if BUILD_BZIP2
BZIP2_CFLAGS += $(shell $(PKG_CONFIG) --cflags bzip2)
BZIP2_LIBS += $(shell $(PKG_CONFIG) --libs bzip2)
$(DEPS_PREFIX)/bzip2.built: $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).source
	rm -rf $(DEPS_PREFIX)/bzip2
	$(MKDIR_P) $(DEPS_PREFIX)/bzip2/build $(DEPS_PREFIX)/lib/pkgconfig $(DEPS_PREFIX)/include
	$(TAR) xf $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).tar.gz -C $(DEPS_PREFIX)/bzip2 --strip-components=1 && \
	cd $(DEPS_PREFIX)/bzip2 && \
	$(if $(findstring linux,$(host_os)),true,$(if $(STATICBUILD),true,cp $(abs_top_srcdir)/build/aux/libbz2-Makefile-mingw) ./) && \
	$(MAKE) PREFIX="$(DEPS_PREFIX)" RANLIB="$(RANLIB)" AR="$(AR)" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS) $(if $(STATICBUILD),,-fPIC)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS) $(if $(STATICBUILD),,-fPIC)" \
		$(if $(STATICBUILD),"libbz2.a",$(if $(findstring linux,$(host_os)),-f Makefile-libbz2_so,-f libbz2-Makefile-mingw install)) && \
	cp -f bzlib.h $(DEPS_PREFIX)/include/ && \
	test -f $(DEPS_PREFIX)/lib/pkgconfig/bzip2.pc || { cp -f $(if $(STATICBUILD),"libbz2.a",libbz2*$(DLLEXT)*) $(DEPS_PREFIX)/lib/ && \
	$(MKDIR_P) "$(DEPS_PREFIX)/lib/pkgconfig" && \
	( echo 'prefix=$(DEPS_PREFIX)'; \
	  echo 'exec_prefix=$${prefix}'; \
	  echo 'libdir=$${exec_prefix}/lib'; \
	  echo 'includedir=$${prefix}/include'; \
	  echo ''; \
	  echo 'Name: bzip2'; \
	  echo 'Description: A file compression library.'; \
	  echo 'Version: $(BZIP2_VERSION)'; \
	  echo 'Cflags: -I$${includedir}'; \
	  echo 'Libs: -L$${libdir} -lbz2' ) > "$(DEPS_PREFIX)/lib/pkgconfig/bzip2.pc" ; }
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors bzip2
	touch $@
else
$(DEPS_PREFIX)/bzip2.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/zlib-$(ZLIB_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).tar.gz "https://github.com/zlib-ng/zlib-ng/archive/refs/tags/$(ZLIB_VERSION).tar.gz" && \
	touch $@

if BUILD_ZLIB
ZLIB_CFLAGS += $(shell $(PKG_CONFIG) --cflags zlib)
ZLIB_LIBS += $(shell $(PKG_CONFIG) --libs zlib)
$(DEPS_PREFIX)/zlib.built: $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).source
	rm -rf $(DEPS_PREFIX)/zlib
	$(MKDIR_P) $(DEPS_PREFIX)/zlib/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).tar.gz -C $(DEPS_PREFIX)/zlib --strip-components=1 && \
	cd $(DEPS_PREFIX)/zlib/build && PKG_CONFIG="$(PKG_CONFIG)" \
		$(if $(findstring linux,$(host_os)),,uname=mingw CHOST=$(host)) RANLIB="$(RANLIB)" AR="$(AR)" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" \
		../configure --zlib-compat --prefix="$(DEPS_PREFIX)" $(if $(or $(DISABLE_NATIVE),$(ENABLE_DEBUG)),--without-optimizations,) $(if $(STATICBUILD),--static,) && \
	$(MAKE) install && \
	$(SED) -i 's|sharedlibdir=.*|sharedlibdir=$${libdir}|' $(DEPS_PREFIX)/lib/pkgconfig/zlib.pc && \
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors zlib
	touch $@
else
$(DEPS_PREFIX)/zlib.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/FMT-$(FMT_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/fmt-$(FMT_VERSION).tar.gz "https://github.com/fmtlib/fmt/archive/refs/tags/$(FMT_VERSION).tar.gz" && \
	touch $@

if BUILD_FMT
FMT_CFLAGS += $(shell $(PKG_CONFIG) --cflags fmt)
FMT_LIBS += $(shell $(PKG_CONFIG) --libs fmt)
$(DEPS_PREFIX)/FMT.built: $(DEPS_CACHE)/FMT-$(FMT_VERSION).source
	rm -rf $(DEPS_PREFIX)/FMT
	$(MKDIR_P) $(DEPS_PREFIX)/FMT/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/fmt-$(FMT_VERSION).tar.gz -C $(DEPS_PREFIX)/FMT --strip-components=1 && \
	cd $(DEPS_PREFIX)/FMT && \
	PKG_CONFIG="$(PKG_CONFIG)" LDFLAGS="$(LDFLAGS) $(if $(findstring yes,$(CLANG)),,-fno-lto)" \
	cmake -S . -B build -G Ninja \
		-DCMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		-DCMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-DCMAKE_SYSTEM_NAME="$(CMAKE_SYSTEM_NAME)" \
		-DCMAKE_SYSTEM_PROCESSOR="$(host_cpu)" \
		-DCMAKE_CXX_COMPILER="$(CXX)" \
		-DCMAKE_CXX_FLAGS="$(CXXFLAGS) $(if $(findstring yes,$(CLANG)),,-fno-lto)" \
		$(CMAKERCOPT) \
		-DFMT_PEDANTIC=OFF \
		-DFMT_WERROR=OFF \
		-DFMT_DOC=OFF \
		-DFMT_INSTALL=ON \
		-DFMT_TEST=OFF \
		-DFMT_FUZZ=OFF \
		-DFMT_CUDA_TEST=OFF \
		-DFMT_OS=ON \
		-DFMT_MODULE=OFF \
		-DFMT_SYSTEM_HEADERS=OFF \
		-DFMT_UNICODE=ON \
		-DBUILD_SHARED_LIBS="$(if $(STATICBUILD),OFF,ON)" && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors fmt
	touch $@
else
$(DEPS_PREFIX)/FMT.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/FREETYPE2-$(FREETYPE2_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/freetype-$(FREETYPE2_VERSION).tar.gz "https://download.savannah.gnu.org/releases/freetype/freetype-$(FREETYPE2_VERSION).tar.gz" && \
	touch $@

if BUILD_FREETYPE2
FREETYPE2_CFLAGS += $(shell $(PKG_CONFIG) --cflags freetype2)
FREETYPE2_LIBS += $(shell $(PKG_CONFIG) --libs freetype2)
$(DEPS_PREFIX)/FREETYPE2.built: $(DEPS_PREFIX)/libpng.built $(DEPS_PREFIX)/bzip2.built $(DEPS_PREFIX)/zlib.built $(DEPS_CACHE)/FREETYPE2-$(FREETYPE2_VERSION).source
	rm -rf $(DEPS_PREFIX)/FREETYPE2
	$(MKDIR_P) $(DEPS_PREFIX)/FREETYPE2/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/freetype-$(FREETYPE2_VERSION).tar.gz -C $(DEPS_PREFIX)/FREETYPE2 --strip-components=1 && \
	cd $(DEPS_PREFIX)/FREETYPE2 && \
	patch -Np1<$(abs_top_srcdir)/build/aux/freetype-win.patch && \
	PKG_CONFIG="$(PKG_CONFIG)" \
		./configure lt_cv_prog_gnu_ld=yes --host=$(host) --prefix="$(DEPS_PREFIX)" \
		--with-zlib=yes --with-bzip2=yes --with-png=yes --with-harfbuzz=no --with-brotli=no --with-librsvg=no \
		$(if $(STATICBUILD),--enable-static --disable-shared,--enable-shared --disable-static) \
		RANLIB="$(RANLIB)" AR="$(AR)" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" && \
	$(MAKE) && \
	$(MAKE) install
	PKG_CONFIG="$(PKG_CONFIG)" \
		$(PKG_CONFIG) --exists --print-errors freetype2
	touch $@
else
$(DEPS_PREFIX)/FREETYPE2.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

BUILT_SOURCES := $(DEPS_PREFIX)/mimalloc.built $(DEPS_PREFIX)/SDL3.built $(DEPS_PREFIX)/SDL3_mixer.built $(DEPS_PREFIX)/libjpeg.built $(DEPS_PREFIX)/FMT.built \
	$(DEPS_PREFIX)/libpng.built $(DEPS_PREFIX)/bzip2.built $(DEPS_PREFIX)/zlib.built $(DEPS_PREFIX)/FREETYPE2.built $(DEPS_PREFIX)/glm.built $(DEPS_PREFIX)/SoLoud.built $(DEPS_PREFIX)/SoundTouch.built

# making sure deps are built before main compile (continued)
$(McOsu_ng_OBJECTS): src/config.h $(BUILT_SOURCES)

# FIXME: just fixme
MCOSU_NG_INCLUDE_FLAGS := $(shell find $(srcdir)/src -not -path '*/.*' -type d -printf "-I%p ")

McOsu_ng_CPPFLAGS := $(MCOSU_CPPFLAGS)

McOsu_ng_CXXFLAGS := \
	-I$(DEPS_PREFIX)/include \
	$(CXXFLAGS_EXTRA) \
	$(MCOSU_CXXFLAGS) \
	$(MCOSU_NG_INCLUDE_FLAGS) \
	$(BUNDLED_INCLUDES) \
	$(SDL3_CFLAGS) \
	$(AUDIO_CFLAGS) \
	$(X11_CFLAGS) \
	$(XI_CFLAGS) \
	$(GL_CFLAGS) \
	$(GLU_CFLAGS) \
	$(EGL_CFLAGS) \
	$(FREETYPE2_CFLAGS) \
	$(FMT_CFLAGS) \
	$(LIBPNG_CFLAGS) \
	$(BZIP2_CFLAGS) \
	$(LIBJPEG_CFLAGS) \
	$(GLM_CFLAGS) \
	$(ZLIB_CFLAGS) \
	$(DXGI_CFLAGS) \
	$(D3D11_CFLAGS) \
	$(VKD3D_CFLAGS)

# Wl,--start-group with no --end-group is a stupid hack.
McOsu_ng_LDFLAGS := \
	$(MIMALLOC_LIBS) \
	-Wl,-rpath='$$ORIGIN/lib',-rpath='$$ORIGIN' \
	-Wl,--start-group \
	$(SDL3_LIBS) \
	$(AUDIO_LIBS) \
	$(X11_LIBS) \
	$(XI_LIBS) \
	$(GL_LIBS) \
	$(GLU_LIBS) \
	$(EGL_LIBS) \
	$(FREETYPE2_LIBS) \
	$(FMT_LIBS) \
	$(LIBPNG_LIBS) \
	$(BZIP2_LIBS) \
	$(LIBJPEG_LIBS) \
	$(ZLIB_LIBS) \
	$(DXGI_LIBS) \
	$(D3D11_LIBS) \
	$(MCOSU_LDFLAGS) \
	$(LDFLAGS_EXTRA)

compile_commands.json: mostlyclean-compile
	@$(BEAR) --version || { echo bear is unavailable to generate a compile_commands.json, install bear && exit 1; }
	@(echo '{'; \
	  echo '"compilation": {'; \
	  echo '"compilers_to_recognize": ['; \
	  echo '{'; \
	  echo '"executable": "emc++"'; \
	  echo '}'; \
	  echo '],'; \
	  echo '"compilers_to_exclude": ["$(CXX)"]'; \
	  echo '}'; \
	  echo '}' ) > bear.cfg
	$(BEAR) --config bear.cfg --append -- $(MAKE) $(AM_MAKEFLAGS) $(McOsu_ng_OBJECTS) $(McOsu_ng_DEPENDENCIES) $(EXTRA_McOsu_ng_DEPENDENCIES) && \
	rm -f bear.cfg

$(abs_top_srcdir)/.clangd: compile_commands.json
	@if [ -f $@ ]; then \
		if grep -q "CompilationDatabase:" $@; then \
			sed -i 's|CompilationDatabase:.*|CompilationDatabase: $(shell realpath --relative-to=$(abs_top_srcdir) $(CURDIR))|g' $@; \
		else \
			echo "CompileFlags:" >> $@; \
			echo "    CompilationDatabase: $(shell realpath --relative-to=$(abs_top_srcdir) $(CURDIR))" >> $@; \
		fi; \
	else \
		echo "CompileFlags:" > $@; \
		echo "    CompilationDatabase: $(shell realpath --relative-to=$(abs_top_srcdir) $(CURDIR))" >> $@; \
		echo "" >> $@; \
		echo "InlayHints:" >> $@; \
		echo "    Enabled: No" >> $@; \
	fi

compile-commands: $(abs_top_srcdir)/.clangd

# windows' loader has no concept of rpaths
LIBDEST :=
if !WIN_PLATFORM
LIBDEST += lib/
endif

install-libs:
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/screenshots"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/shaders"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/$(LIBDEST)"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/fonts"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/materials"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/materials/default"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/models"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/cfg"
	find $(srcdir)/$(ASSETS_DIR)/models -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/models" ';'
	find $(srcdir)/$(ASSETS_DIR)/shaders -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/shaders" ';'
	find $(srcdir)/$(ASSETS_DIR)/fonts -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/fonts" ';'
	find $(srcdir)/$(ASSETS_DIR)/materials -mindepth 1 -maxdepth 1 -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/materials" ';'
	find $(srcdir)/$(ASSETS_DIR)/materials/default -mindepth 1 -maxdepth 1 -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/materials/default" ';'
	find $(srcdir)/$(ASSETS_DIR)/cfg -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/cfg" ';'
if WIN_PLATFORM
if BUILD_MIMALLOC
	@cp -P "$(DEPS_PREFIX)/bin/mimalloc"{,-redirect$(if $(filter x86_64,$(host_cpu)),,32)}".dll" "$(DESTDIR)$(bindir)/$(LIBDEST)"
endif
if WINSHARED_DLLS_NEEDED
	@cp -P $(WINSHARED_DLLS) "$(DESTDIR)$(bindir)/$(LIBDEST)"
endif
endif
if USE_BASS
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bass$(DLLEXT) "$(DESTDIR)$(bindir)/$(LIBDEST)"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bass_fx$(DLLEXT) "$(DESTDIR)$(bindir)/$(LIBDEST)"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_MIX_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bassmix$(DLLEXT) "$(DESTDIR)$(bindir)/$(LIBDEST)"
if WIN_PLATFORM
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_ASIO_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bassasio$(DLLEXT) "$(DESTDIR)$(bindir)/$(LIBDEST)"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_WASAPI_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)basswasapi$(DLLEXT) "$(DESTDIR)$(bindir)/$(LIBDEST)"
endif
endif
if USE_SDLMIXER
	$(if $(STATICBUILD),,@cp -P "$(SDL3_MIXER_PREFIX)/lib"/{*$(LIBPREFIX)SDL3_mixer*$(DLLEXT)*,*$(LIBPREFIX)mpg123*$(DLLEXT)*,*$(LIBPREFIX)xmp*$(DLLEXT)*,*$(LIBPREFIX)wavpack*$(DLLEXT)*,*$(LIBPREFIX)opus*$(DLLEXT)*,*$(LIBPREFIX)ogg*$(DLLEXT)*} "$(DESTDIR)$(bindir)/$(LIBDEST)")
endif
if USE_SOLOUD
	$(if $(STATICBUILD),,@cp -P "$(SOLOUD_PREFIX)/lib"/*$(LIBPREFIX)SoundTouch*$(DLLEXT)* "$(DESTDIR)$(bindir)/$(LIBDEST)")
endif
if BUILD_SDL3
	$(if $(SDL3_STATIC),,@`find $(SDL3_PREFIX) '(' -iname '*SDL3*'$(DLLEXT) -o -iname '*SDL3*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_LIBJPEG
	$(if $(STATICBUILD),,@`find $(LIBJPEG_PREFIX) '(' -iname '*libjpeg-*'$(DLLEXT) -o -iname '*libjpeg*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
	$(if $(STATICBUILD),,@`find $(LIBJPEG_PREFIX) '(' -iname '*libturbojpeg-*'$(DLLEXT) -o -iname '*libturbojpeg''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_LIBPNG
	$(if $(STATICBUILD),,@`find $(LIBPNG_PREFIX) '(' -iname '*libpng*'$(DLLEXT) -o -iname '*libpng*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_BZIP2
	$(if $(STATICBUILD),,@`find $(BZIP2_PREFIX) '(' -iname '*bz2*'$(DLLEXT) -o -iname '*bz2*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_ZLIB
	$(if $(STATICBUILD),,@`find $(ZLIB_PREFIX) '(' -iname '*libz-*'$(DLLEXT) -o -iname '*libz*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_FREETYPE2
	$(if $(STATICBUILD),,@`find $(FREETYPE2_PREFIX) '(' -iname '*freetype*'$(DLLEXT) -o -iname '*freetype*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif
if BUILD_FMT
	$(if $(STATICBUILD),,@`find $(FMT_PREFIX) '(' -iname '*fmt*'$(DLLEXT) -o -iname '*fmt*''.so.*' ')' -exec cp -P '{''}' "$(DESTDIR)$(bindir)/$(LIBDEST)" ';'`)
endif

# install hooks
install-exec-hook: install-libs
if !WIN_PLATFORM
	cd "$(DESTDIR)$(bindir)" && \
	$(LN_S) -rf $(PROGRAMS) McEngine && \
	$(LN_S) -rf $(PROGRAMS) McOsu
endif

uninstall-local:
	rm -rf "$(DESTDIR)$(bindir)/"

# cleanup targets
clean-local:
	rm -rf $(builddir)/build/obj
	rm -f $(PROGRAMS)

clean-deps:
	rm -rf $(DEPS_PREFIX) && $(MKDIR_P) $(DEPS_PREFIX)

clean-dep-cache:
	rm -rf $(DEPS_CACHE)
.PHONY: clean-deps clean-dep-cache install-libs

maintainer-clean-local: clean-deps clean-dep-cache

distclean-local: clean-deps clean-dep-cache

# TODO: distribution packaging
dist-hook:
if USE_BASS
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/lib $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/include $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib $(distdir)/$(BUNDLED_BASS_FX_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/include $(distdir)/$(BUNDLED_BASS_FX_DIR)/
endif
	cp -r $(srcdir)/$(ASSETS_DIR)/models $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/shaders $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/fonts $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/materials $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/cfg $(distdir)/
	find $(distdir) -type f -name ".git*" -delete
	find $(distdir) -type f -name "*.a" -delete
	find $(distdir) -type f -name "*.dll" -delete
	find $(distdir) -type f -name "*.dylib" -delete

# TODO: distribution package files
EXTRA_DIST := \
	$(ASSETS_DIR)/models \
	$(ASSETS_DIR)/shaders \
	$(ASSETS_DIR)/fonts \
	$(ASSETS_DIR)/materials \
	$(ASSETS_DIR)/cfg \
	autogen.sh

if USE_BASS
EXTRA_DIST += \
	$(BUNDLED_BASS_DIR)/include \
	$(BUNDLED_BASS_FX_DIR)/include \
	$(BUNDLED_BASS_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bass$(DLLEXT) \
	$(BUNDLED_BASS_FX_DIR)/lib/$(SYSNAME)/$(host_cpu)/$(LIBPREFIX)bass_fx$(DLLEXT)
endif

MAINTAINERCLEANFILES = $(top_srcdir)/src/Makefile.sources

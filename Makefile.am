bin_PROGRAMS = McOsu-ng

# generated by ./autogen.sh
include $(top_srcdir)/src/Makefile.sources

CLEANFILES = \
	*.o \
	*.o.tmp \
	src/*.o.tmp \
	src/*.o \
	src/*/*.o \
	src/*/*/*.o \
	src/*/*.o.tmp \
	src/*/*/*.o.tmp \
	*~ \
	*.bak

$(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).tar.gz "https://github.com/microsoft/mimalloc/archive/refs/tags/v$(MIMALLOC_VERSION).tar.gz" && \
	touch $@

if BUILD_MIMALLOC
MIMALLOC_LIBS = $(DEPS_PREFIX)/lib/mimalloc$(if $(ENABLE_DEBUG),-debug,).o
$(DEPS_PREFIX)/mimalloc.built: $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).source
	rm -rf $(DEPS_PREFIX)/mimalloc
	$(MKDIR_P) $(DEPS_PREFIX)/mimalloc && \
	$(TAR) xf $(DEPS_CACHE)/mimalloc-$(MIMALLOC_VERSION).tar.gz -C $(DEPS_PREFIX)/mimalloc --strip-components=1 && \
	$(MKDIR_P) $(DEPS_PREFIX)/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)" && \
	cd $(DEPS_PREFIX)/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)" && \
	env PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		LDFLAGS="$(LDFLAGS) -xnone" cmake \
		-D CMAKE_C_COMPILER="$(CC_NOCCACHE)" \
		-D CMAKE_C_FLAGS="$(CFLAGS)" \
		-D CMAKE_CXX_COMPILER="$(CXX_NOCCACHE)" \
		-D CMAKE_CXX_FLAGS="$(CXXFLAGS) -xc++" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D MI_OPT_ARCH=ON \
		-D MI_USE_CXX=ON \
		-D MI_NO_OPT_ARCH=OFF \
		-D MI_BUILD_SHARED=OFF \
		-D MI_BUILD_TESTS=OFF \
		-D MI_INSTALL_TOPLEVEL=ON \
		-D MI_BUILD_STATIC=OFF \
		-D MI_BUILD_OBJECT=ON ../.. && \
	make install
	touch $@
else
MIMALLOC_LIBS :=
$(DEPS_PREFIX)/mimalloc.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/SDL3.source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(GIT) clone https://github.com/libsdl-org/SDL.git $(DEPS_CACHE)/SDL3 && \
	touch $@

if BUILD_SDL3
SDL3_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags sdl3)
SDL3_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs sdl3)
$(DEPS_PREFIX)/SDL3.built: $(DEPS_PREFIX)/FREETYPE2.built $(DEPS_CACHE)/SDL3.source
	rm -rf $(DEPS_PREFIX)/SDL3
	$(MKDIR_P) $(DEPS_PREFIX) $(DEPS_PREFIX)/lib/pkgconfig
	$(GIT) clone $(DEPS_CACHE)/SDL3 $(DEPS_PREFIX)/SDL3 && \
	$(GIT) -C $(DEPS_PREFIX)/SDL3 remote set-url origin https://github.com/libsdl-org/SDL.git && \
	$(GIT) -C $(DEPS_PREFIX)/SDL3 pull && $(GIT) -C $(DEPS_PREFIX)/SDL3 checkout release-3.2.10 && \
	$(MKDIR_P) $(DEPS_PREFIX)/SDL3/build
	cd $(DEPS_PREFIX)/SDL3 && \
	patch -Np1<$(abs_top_srcdir)/build/aux/sdl-c23bool.patch && \
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
	LDFLAGS="$(LDFLAGS)" cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		$(if $(ENABLE_DEBUG),-DSDL_ASAN=ON,) \
		-D SDL_HIDAPI_LIBUSB=OFF \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D SDL_SHARED="$(if $(SDL3_STATIC),OFF,ON)" \
		-D SDL_STATIC="$(if $(SDL3_STATIC),ON,OFF)" \
		-D SDL_RPATH=OFF \
		-D SDL_CCACHE="$(if $(filter ccache,$(CC)),ON,OFF)" \
		-D CMAKE_C_COMPILER="$(CC_NOCCACHE)" \
		-D CMAKE_C_FLAGS="$(CFLAGS) -Wno-error=incompatible-pointer-types" && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors sdl3
	touch $@
else
$(DEPS_PREFIX)/SDL3.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/GLEW-$(GLEW_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/glew-$(GLEW_VERSION).tgz "https://github.com/nigels-com/glew/releases/download/glew-$(GLEW_VERSION)/glew-$(GLEW_VERSION).tgz" && \
	touch $@

if BUILD_GLEW
GLEW_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags glew)
GLEW_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs glew)
$(DEPS_PREFIX)/GLEW.built: $(DEPS_CACHE)/GLEW-$(GLEW_VERSION).source
	rm -rf $(DEPS_PREFIX)/GLEW
	$(MKDIR_P) $(DEPS_PREFIX)/GLEW $(DEPS_PREFIX)/lib/pkgconfig $(DEPS_PREFIX)/lib64/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/glew-$(GLEW_VERSION).tgz -C $(DEPS_PREFIX)/GLEW --strip-components=1 && \
	cd $(DEPS_PREFIX)/GLEW && \
		patch -Np1<$(abs_top_srcdir)/build/aux/glew-install.patch && \
		patch -Np1<$(abs_top_srcdir)/build/aux/egl+glx.patch && \
		$(SED) -i 's|lib64|lib|' config/Makefile.linux && \
  		$(SED) -i '/^.PHONY: .*\.pc$$/d' Makefile && \
		$(MAKE) SYSTEM=linux-egl GLEW_DEST="$(DEPS_PREFIX)" \
		STRIP= CC="$(CC)" CXX="$(CXX)" LD="$(CC)" \
		$(if $(SDL3_STATIC),glew.lib.static,glew.lib.shared)
	cd $(DEPS_PREFIX)/GLEW && \
		$(MAKE) SYSTEM=linux-egl GLEW_DEST="$(DEPS_PREFIX)" \
		STRIP= CC="$(CC)" CXX="$(CXX)" LD="$(CC)" \
		install
	$(MKDIR_P) "$(DEPS_PREFIX)/lib/pkgconfig"
	( echo 'prefix=$(DEPS_PREFIX)'; \
	  echo 'exec_prefix=$${prefix}'; \
	  echo 'libdir=$${exec_prefix}/lib'; \
	  echo 'includedir=$${prefix}/include'; \
	  echo ''; \
	  echo 'Name: glew'; \
	  echo 'Description: The OpenGL Extension Wrangler library'; \
	  echo 'Version: $(GLEW_VERSION)'; \
	  echo 'Cflags: -I$${includedir}'; \
	  echo 'Libs: -L$${libdir} $(if $(SDL3_STATIC),-l:libGLEW.a,-lGLEW) -lEGL -lGL'; \
	  echo 'Requires: glu' ) > "$(DEPS_PREFIX)/lib/pkgconfig/glew.pc"
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors glew
	touch $@
else
$(DEPS_PREFIX)/GLEW.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).tar.gz "https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/$(LIBJPEG_VERSION)/libjpeg-turbo-$(LIBJPEG_VERSION).tar.gz" && \
	touch $@

if BUILD_LIBJPEG
LIBJPEG_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags libjpeg)
LIBJPEG_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs libjpeg)
$(DEPS_PREFIX)/libjpeg.built: $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).source
	rm -rf $(DEPS_PREFIX)/libjpeg
	$(MKDIR_P) $(DEPS_PREFIX)/libjpeg/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/libjpeg-$(LIBJPEG_VERSION).tar.gz -C $(DEPS_PREFIX)/libjpeg --strip-components=1 && \
	cd $(DEPS_PREFIX)/libjpeg && \
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
	LDFLAGS="$(LDFLAGS)" cmake -S . -B build -G Ninja \
		-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,Release)" \
		-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
		-D CMAKE_C_COMPILER="$(CC_NOCCACHE)" \
		-D CMAKE_C_FLAGS="$(CFLAGS)" \
		-D REQUIRE_SIMD=ON \
		$(if $(SDL3_STATIC),-DENABLE_STATIC=ON -DENABLE_SHARED=OFF,-DENABLE_STATIC=OFF -DENABLE_SHARED=ON) && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors libjpeg
	touch $@
else
$(DEPS_PREFIX)/libjpeg.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).tar.gz "https://github.com/pnggroup/libpng/archive/refs/tags/v$(LIBPNG_VERSION).tar.gz" && \
	touch $@

if BUILD_LIBPNG
LIBPNG_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags libpng)
LIBPNG_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs libpng)
$(DEPS_PREFIX)/libpng.built: $(DEPS_PREFIX)/zlib.built $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).source
	rm -rf $(DEPS_PREFIX)/libpng
	$(MKDIR_P) $(DEPS_PREFIX)/libpng/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/libpng-$(LIBPNG_VERSION).tar.gz -C $(DEPS_PREFIX)/libpng --strip-components=1 && \
	cd $(DEPS_PREFIX)/libpng && PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		./configure --prefix="$(DEPS_PREFIX)" \
		$(if $(SDL3_STATIC),--enable-static --disable-shared,--enable-shared --disable-static) \
		CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" && \
	$(MAKE) && \
	$(MAKE) install
	$(if $(SDL3_STATIC),$(SED) -i -e 's|-lz|-l:libz.a|g' -e 's|-lpng16|-l:libpng16.a|g' $(DEPS_PREFIX)/lib/pkgconfig/libpng.pc,)
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors libpng
	touch $@
else
$(DEPS_PREFIX)/libpng.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).tar.gz "https://sourceware.org/pub/bzip2/bzip2-$(BZIP2_VERSION).tar.gz" && \
	touch $@

if BUILD_BZIP2
BZIP2_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags bzip2)
BZIP2_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs bzip2)
$(DEPS_PREFIX)/bzip2.built: $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).source
	rm -rf $(DEPS_PREFIX)/bzip2
	$(MKDIR_P) $(DEPS_PREFIX)/bzip2/build $(DEPS_PREFIX)/lib/pkgconfig $(DEPS_PREFIX)/include
	$(TAR) xf $(DEPS_CACHE)/bzip2-$(BZIP2_VERSION).tar.gz -C $(DEPS_PREFIX)/bzip2 --strip-components=1 && \
	cd $(DEPS_PREFIX)/bzip2 && \
	$(MAKE) $(if $(SDL3_STATIC),"libbz2.a",-f Makefile-libbz2_so) \
		PREFIX="$(DEPS_PREFIX)" CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" && \
	cp -f bzlib.h $(DEPS_PREFIX)/include/ && \
	cp -f $(if $(SDL3_STATIC),"libbz2.a",libbz2*.so*) $(DEPS_PREFIX)/lib/ && \
	$(MKDIR_P) "$(DEPS_PREFIX)/lib/pkgconfig" && \
	( echo 'prefix=$(DEPS_PREFIX)'; \
	  echo 'exec_prefix=$${prefix}'; \
	  echo 'libdir=$${exec_prefix}/lib'; \
	  echo 'includedir=$${prefix}/include'; \
	  echo ''; \
	  echo 'Name: bzip2'; \
	  echo 'Description: A file compression library'; \
	  echo 'Version: $(BZIP2_VERSION)'; \
	  echo 'Cflags: -I$${includedir}'; \
	  echo 'Libs: -L$${libdir} $(if $(SDL3_STATIC),-l:libbz2.a,-lbz2)' ) > "$(DEPS_PREFIX)/lib/pkgconfig/bzip2.pc"
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors bzip2
	touch $@
else
$(DEPS_PREFIX)/bzip2.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/zlib-$(ZLIB_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).tar.gz "https://github.com/zlib-ng/zlib-ng/archive/refs/tags/$(ZLIB_VERSION).tar.gz" && \
	touch $@

if BUILD_ZLIB
ZLIB_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags zlib)
ZLIB_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs zlib)
$(DEPS_PREFIX)/zlib.built: $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).source
	rm -rf $(DEPS_PREFIX)/zlib
	$(MKDIR_P) $(DEPS_PREFIX)/zlib/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/zlib-$(ZLIB_VERSION).tar.gz -C $(DEPS_PREFIX)/zlib --strip-components=1 && \
	cd $(DEPS_PREFIX)/zlib/build && PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" \
		../configure --zlib-compat --prefix="$(DEPS_PREFIX)" $(if $(SDL3_STATIC),--static,) && \
	$(MAKE) && \
	$(MAKE) install
	$(if $(SDL3_STATIC),$(SED) -i 's|-lz|-l:libz.a|g' $(DEPS_PREFIX)/lib/pkgconfig/zlib.pc,)
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors zlib
	touch $@
else
$(DEPS_PREFIX)/zlib.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

$(DEPS_CACHE)/FREETYPE2-$(FREETYPE2_VERSION).source:
	$(MKDIR_P) $(DEPS_CACHE)
	$(WGET) -qO $(DEPS_CACHE)/freetype-$(FREETYPE2_VERSION).tar.gz "https://download.savannah.gnu.org/releases/freetype/freetype-$(FREETYPE2_VERSION).tar.gz" && \
	touch $@

if BUILD_FREETYPE2
FREETYPE2_CFLAGS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --cflags freetype2)
FREETYPE2_LIBS += $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig" pkg-config $(PKGTYPE) --libs freetype2)
$(DEPS_PREFIX)/FREETYPE2.built: $(DEPS_PREFIX)/libpng.built $(DEPS_PREFIX)/bzip2.built $(DEPS_PREFIX)/zlib.built $(DEPS_CACHE)/FREETYPE2-$(FREETYPE2_VERSION).source
	rm -rf $(DEPS_PREFIX)/FREETYPE2
	$(MKDIR_P) $(DEPS_PREFIX)/FREETYPE2/build $(DEPS_PREFIX)/lib/pkgconfig
	$(TAR) xf $(DEPS_CACHE)/freetype-$(FREETYPE2_VERSION).tar.gz -C $(DEPS_PREFIX)/FREETYPE2 --strip-components=1 && \
	cd $(DEPS_PREFIX)/FREETYPE2 && PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		./configure --prefix="$(DEPS_PREFIX)" --with-harfbuzz=no --with-brotli=no \
		$(if $(SDL3_STATIC),--enable-static --disable-shared,--enable-shared --disable-static) \
		CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)" && \
	$(MAKE) && \
	$(MAKE) install
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors freetype2
	touch $@
else
$(DEPS_PREFIX)/FREETYPE2.built:
	$(MKDIR_P) $(DEPS_PREFIX) && touch $@
endif

BUILT_SOURCES := $(DEPS_PREFIX)/mimalloc.built $(DEPS_PREFIX)/SDL3.built $(DEPS_PREFIX)/GLEW.built $(DEPS_PREFIX)/libjpeg.built \
	$(DEPS_PREFIX)/libpng.built $(DEPS_PREFIX)/bzip2.built $(DEPS_PREFIX)/zlib.built $(DEPS_PREFIX)/FREETYPE2.built

# making sure deps are built before main compile (continued)
$(McOsu_ng_OBJECTS): $(BUILT_SOURCES)

# FIXME: just fixme
MCOSU_NG_INCLUDE_FLAGS := $(shell find $(srcdir)/src -not -path '*/.*' -type d -printf "-I%p ")

McOsu_ng_CXXFLAGS := \
	$(MCOSU_NG_INCLUDE_FLAGS) \
	-I$(srcdir)/$(BUNDLED_BASS_DIR)/include \
    -I$(srcdir)/$(BUNDLED_BASS_FX_DIR)/include \
	$(SDL3_CFLAGS) \
	$(X11_CFLAGS) \
	$(XI_CFLAGS) \
	$(GL_CFLAGS) \
	$(GLU_CFLAGS) \
	$(GLEW_CFLAGS) \
	$(FREETYPE2_CFLAGS) \
	$(LIBPNG_CFLAGS) \
	$(BZIP2_CFLAGS) \
	$(LIBJPEG_CFLAGS) \
	$(ZLIB_CFLAGS) \
	-pthread

McOsu_ng_LDFLAGS := \
	$(MIMALLOC_LIBS) \
	-Wl,-rpath='$$ORIGIN/lib',-rpath='$$ORIGIN' \
	-L$(srcdir)/$(BUNDLED_BASS_DIR)/lib/linux \
	-lbass \
	$(SDL3_LIBS) \
	$(X11_LIBS) \
	$(XI_LIBS) \
	$(GL_LIBS) \
	$(GLU_LIBS) \
	$(GLEW_LIBS) \
	$(FREETYPE2_LIBS) \
	$(LIBPNG_LIBS) \
	$(BZIP2_LIBS) \
	$(LIBJPEG_LIBS) \
	$(ZLIB_LIBS) \
	-lpthread

$(top_srcdir)/compile_commands.json: clean
	$(BEAR) --version || { echo bear is unavailable to generate a compile_commands.json, install bear && exit 1; }
	$(BEAR) --append -- $(MAKE) $(AM_MAKEFLAGS) all-am

compile-commands: $(McOsu_ng_OBJECTS) $(top_srcdir)/compile_commands.json

install-libs:
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/screenshots"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/shaders"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/lib"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/fonts"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/materials"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/models"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/cfg"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_DIR)/lib/linux/libbass.so "$(DESTDIR)$(bindir)/lib/"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib/linux/libbass_fx.so "$(DESTDIR)$(bindir)/lib/"
	find $(srcdir)/$(ASSETS_DIR)/models -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/models" ';'
	find $(srcdir)/$(ASSETS_DIR)/shaders -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/shaders" ';'
if BUILD_SDL3
	$(if $(SDL3_STATIC),,@cp -P "$(SDL3_PREFIX)/lib"/libSDL3*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_GLEW
	$(if $(SDL3_STATIC),,@cp -P "$(GLEW_PREFIX)/lib"/libGLEW*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_LIBJPEG
	$(if $(SDL3_STATIC),,@@libdir=$(LIBJPEG_PREFIX)/`test -d "$(LIBJPEG_PREFIX)/lib64" && echo "lib64" || echo "lib"`; \
	cp -P "$$libdir"/libjpeg*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_LIBPNG
	$(if $(SDL3_STATIC),,@cp -P "$(LIBPNG_PREFIX)/lib"/libpng*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_BZIP2
	$(if $(SDL3_STATIC),,@cp -P "$(BZIP2_PREFIX)/lib"/libbz2*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_ZLIB
	$(if $(SDL3_STATIC),,@cp -P "$(ZLIB_PREFIX)/lib"/libz*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_FREETYPE2
	$(if $(SDL3_STATIC),,@cp -P "$(FREETYPE2_PREFIX)/lib"/libfreetype*.so* "$(DESTDIR)$(bindir)/lib/")
endif

# install hooks
install-exec-hook: install-libs
	cd "$(DESTDIR)$(bindir)" && \
	$(LN_S) -rf $(PROGRAMS) McEngine && \
	$(LN_S) -rf $(PROGRAMS) McOsu

uninstall-local:
	rm -rf "$(DESTDIR)$(bindir)/"

# cleanup targets
clean-local: uninstall-local
	rm -rf $(builddir)/build/obj
	rm -f $(PROGRAMS)

clean-deps:
	rm -rf $(DEPS_PREFIX) && $(MKDIR_P) $(DEPS_PREFIX)

clean-dep-cache:
	rm -rf $(DEPS_CACHE)
.PHONY: clean-deps clean-dep-cache install-libs

maintainer-clean-local: clean-deps clean-dep-cache

distclean-local: clean-deps clean-dep-cache

# TODO: distribution packaging
dist-hook:
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/lib $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/include $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib $(distdir)/$(BUNDLED_BASS_FX_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/include $(distdir)/$(BUNDLED_BASS_FX_DIR)/
	cp -r $(srcdir)/$(ASSETS_DIR)/models $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/shaders $(distdir)/
	find $(distdir) -type f -name ".git*" -delete
	find $(distdir) -type f -name "*.a" -delete
	find $(distdir) -type f -name "*.dll" -delete
	find $(distdir) -type f -name "*.dylib" -delete

# TODO: distribution package files
EXTRA_DIST = \
	$(BUNDLED_BASS_DIR)/include \
	$(BUNDLED_BASS_FX_DIR)/include \
	$(BUNDLED_BASS_DIR)/lib/linux/libbass.so \
	$(BUNDLED_BASS_FX_DIR)/lib/linux/libbass_fx.so \
	$(ASSETS_DIR)/models \
	$(ASSETS_DIR)/shaders \
	autogen.sh

MAINTAINERCLEANFILES = $(top_srcdir)/src/Makefile.sources

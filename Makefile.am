bin_PROGRAMS = McOsu-ng

# generated by ./autogen.sh
include $(top_srcdir)/src/Makefile.sources

CLEANFILES = \
	*.o \
	*.o.tmp \
	src/*.o.tmp \
	src/*.o \
	src/*/*.o \
	src/*/*/*.o \
	src/*/*.o.tmp \
	src/*/*/*.o.tmp \
	*~ \
	*.bak

build/deps/mimalloc.built:
	$(MKDIR_P) build/deps/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)"
	$(WGET) -qO- "https://github.com/microsoft/mimalloc/archive/refs/tags/v$(MIMALLOC_VERSION).tar.gz" | $(TAR) xz -C build/deps/mimalloc --strip-components=1
	cd build/deps/mimalloc/out/"$(if $(ENABLE_DEBUG),debug,release)" && \
	env LDFLAGS="$(LDFLAGS) -xnone" cmake \
	-D CMAKE_C_COMPILER="$(CC_NOCCACHE)" \
	-D CMAKE_C_FLAGS="$(CFLAGS)" \
	-D CMAKE_CXX_COMPILER="$(CXX_NOCCACHE)" \
	-D CMAKE_CXX_FLAGS="$(CXXFLAGS) -xc++" \
	-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
	-D MI_OPT_ARCH=ON \
	-D MI_USE_CXX=ON \
	-D MI_NO_OPT_ARCH=OFF \
	-D MI_BUILD_SHARED=OFF \
	-D MI_BUILD_TESTS=OFF \
	-D MI_INSTALL_TOPLEVEL=ON \
	-D MI_BUILD_STATIC=OFF \
	-D MI_BUILD_OBJECT=ON ../.. && \
	make install
	touch $@

# build rules for dependencies when system packages aren't used
#$(WGET) -qO- "https://github.com/libsdl-org/SDL/releases/download/preview-$(SDL3_VERSION)/SDL3-$(SDL3_VERSION).tar.gz" | $(TAR) xz -C build/deps/SDL3 --strip-components=1
build/deps/SDL3.built: build/deps/FREETYPE2.built
	$(MKDIR_P) build/deps build/deps/lib/pkgconfig
	$(GIT) clone --depth=1 https://github.com/libsdl-org/SDL build/deps/SDL3
	$(MKDIR_P) build/deps/SDL3/build
	cd build/deps/SDL3 && \
	patch -Np1<../../bool.patch && \
	cmake -S . -B build -G Ninja \
	-D CMAKE_BUILD_TYPE="$(if $(ENABLE_DEBUG),Debug,None)" \
	$(if $(ENABLE_DEBUG),-DSDL_ASAN=ON,) \
	-D SDL_HIDAPI_LIBUSB=OFF \
	-D CMAKE_INSTALL_PREFIX="$(DEPS_PREFIX)" \
	-D SDL_SHARED="$(if $(SDL3_STATIC),OFF,ON)" \
	-D SDL_STATIC="$(if $(SDL3_STATIC),ON,OFF)" \
	-D SDL_RPATH=OFF \
	-D SDL_CCACHE="$(if $(filter ccache,$(CC)),ON,OFF)" \
	-D CMAKE_C_COMPILER="$(CC_NOCCACHE)" \
	-D CMAKE_C_FLAGS="$(CFLAGS) -Wno-error=incompatible-pointer-types" && \
	cmake --build build && \
	cmake --install build
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors sdl3
	touch $@

# sus
build/deps/GLEW.built:
	$(MKDIR_P) build/deps/GLEW build/deps/lib/pkgconfig
	$(WGET) -qO- "https://github.com/nigels-com/glew/releases/download/glew-$(GLEW_VERSION)/glew-$(GLEW_VERSION).tgz" | $(TAR) xz -C build/deps/GLEW --strip-components=1
	cd build/deps/GLEW && \
		$(MAKE) SYSTEM=$(GLEW_SYSTEM) GLEW_DEST="$(DEPS_PREFIX)" \
		CC="$(CC)" CXX="$(CXX)" LD="$(CC)" \
		CFLAGS.EXTRA="$(CFLAGS) -fPIC -Wno-strict-prototypes" \
		LDFLAGS.EXTRA="$(LDFLAGS) -lX11" \
		$(if $(SDL3_STATIC),GLEW_STATIC=1,)
	cd build/deps/GLEW && \
		$(MAKE) SYSTEM=$(GLEW_SYSTEM) GLEW_DEST="$(DEPS_PREFIX)" \
		CC="$(CC)" CXX="$(CXX)" LD="$(CC)" \
		$(if $(SDL3_STATIC),GLEW_STATIC=1,) \
		install
	$(MKDIR_P) "$(DEPS_PREFIX)/lib/pkgconfig"
	( echo 'prefix=$(DEPS_PREFIX)'; \
	  echo 'exec_prefix=$${prefix}'; \
	  echo 'libdir=$${exec_prefix}/lib'; \
	  echo 'includedir=$${prefix}/include'; \
	  echo ''; \
	  echo 'Name: glew'; \
	  echo 'Description: The OpenGL Extension Wrangler library'; \
	  echo 'Version: $(GLEW_VERSION)'; \
	  echo 'Cflags: -I$${includedir}'; \
	  echo 'Libs: -L$${libdir} $(if $(SDL3_STATIC),-l:libGLEW.a,-lGLEW) -lEGL -lGL -lGLU -lOpenGL' ) > "$(DEPS_PREFIX)/lib/pkgconfig/glew.pc"
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors glew
	touch $@

build/deps/FREETYPE2.built:
	$(MKDIR_P) build/deps/FREETYPE2/build build/deps/lib/pkgconfig
	$(WGET) -qO- "https://download.savannah.gnu.org/releases/freetype/freetype-$(FREETYPE2_VERSION).tar.gz" | $(TAR) xz -C build/deps/FREETYPE2 --strip-components=1
	cd build/deps/FREETYPE2 && ./configure --prefix="$(DEPS_PREFIX)" \
		$(if $(SDL3_STATIC),--enable-static --enable-shared,--enable-shared --disable-static) \
		CC="$(CC)" CXX="$(CXX)" LD="$(LD)" CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" LDFLAGS="$(LDFLAGS)"
	$(MAKE) -C build/deps/FREETYPE2
	$(MAKE) -C build/deps/FREETYPE2 install
	PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig:$(DEPS_PREFIX)/lib64/pkgconfig:$(PKG_CONFIG_PATH)" \
		$(PKG_CONFIG) --exists --print-errors freetype2
	touch $@

DEPS_BUILT =
if BUILD_MIMALLOC
DEPS_BUILT += build/deps/mimalloc.built
endif
if BUILD_SDL3
DEPS_BUILT += build/deps/SDL3.built
endif
if BUILD_GLEW
DEPS_BUILT += build/deps/GLEW.built
endif
if BUILD_FREETYPE2
DEPS_BUILT += build/deps/FREETYPE2.built
endif

# making sure deps are built before main compile
BUILT_SOURCES := $(DEPS_BUILT)

# making sure deps are built before main compile (continued)
$(McOsu_ng_OBJECTS): $(DEPS_BUILT)

# re-evaluated after deps are built
PKGTYPE = $(if $(SDL3_STATIC),--static,)

SDL3_CFLAGS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --cflags sdl3)
SDL3_LIBS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --libs sdl3)
GLEW_CFLAGS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --cflags glew)
GLEW_LIBS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --libs glew)
FREETYPE2_CFLAGS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --cflags freetype2)
FREETYPE2_LIBS = $(shell PKG_CONFIG_PATH="$(DEPS_PREFIX)/lib/pkgconfig" pkg-config $(PKGTYPE) --libs freetype2)

if BUILD_MIMALLOC
MIMALLOC_LIBS = $(DEPS_PREFIX)/lib/mimalloc.o
else
MIMALLOC_LIBS :=
endif

# FIXME: just fixme
MCOSU_NG_INCLUDE_FLAGS := $(shell find $(srcdir)/src -not -path '*/.*' -type d -printf "-I%p ")

McOsu_ng_CXXFLAGS := \
	$(MCOSU_NG_INCLUDE_FLAGS) \
	-I$(srcdir)/$(BUNDLED_BASS_DIR)/include \
    -I$(srcdir)/$(BUNDLED_BASS_FX_DIR)/include \
	$(SDL3_CFLAGS) \
	$(X11_CFLAGS) \
	$(XI_CFLAGS) \
	$(GL_CFLAGS) \
	$(GLU_CFLAGS) \
	$(GLEW_CFLAGS) \
	$(FREETYPE2_CFLAGS) \
	$(LIBJPEG_CFLAGS) \
	$(ZLIB_CFLAGS) \
	-pthread

McOsu_ng_LDFLAGS := \
	$(MIMALLOC_LIBS) \
	-Wl,-rpath='$$ORIGIN/lib',-rpath='$$ORIGIN' \
	-L$(srcdir)/$(BUNDLED_BASS_DIR)/lib/linux \
	-lbass \
	$(SDL3_LIBS) \
	$(X11_LIBS) \
	$(XI_LIBS) \
	$(GL_LIBS) \
	$(GLU_LIBS) \
	$(GLEW_LIBS) \
	$(FREETYPE2_LIBS) \
	$(LIBJPEG_LIBS) \
	$(ZLIB_LIBS) \
	-lpthread

$(top_srcdir)/compile_commands.json: clean
	$(BEAR) --version || { echo bear is unavailable to generate a compile_commands.json, install bear && exit 1; }
	$(BEAR) --append -- $(MAKE) $(AM_MAKEFLAGS) all-am

compile-commands: $(BUILT_SOURCES) $(top_srcdir)/compile_commands.json

install-libs:
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/screenshots"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/shaders"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/lib"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/fonts"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/materials"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/models"
	$(INSTALL) -dm 755 "$(DESTDIR)$(bindir)/cfg"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_DIR)/lib/linux/libbass.so "$(DESTDIR)$(bindir)/lib/"
	$(INSTALL) -m 755 $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib/linux/libbass_fx.so "$(DESTDIR)$(bindir)/lib/"
	find $(srcdir)/$(ASSETS_DIR)/models -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/models" ';'
	find $(srcdir)/$(ASSETS_DIR)/shaders -type f -exec $(INSTALL) -Dm 644 '{''}' "$(DESTDIR)$(bindir)/shaders" ';'
if BUILD_SDL3
	$(if $(SDL3_STATIC),,@cp -P "$(SDL3_PREFIX)/lib"/libSDL3*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_GLEW
	$(if $(SDL3_STATIC),,@libdir=$(GLEW_PREFIX)/`test -d "$(GLEW_PREFIX)/lib64" && echo "lib64" || echo "lib"`; \
	cp -P "$$libdir"/libGLEW*.so* "$(DESTDIR)$(bindir)/lib/")
endif
if BUILD_FREETYPE2
	@cp -P "$(FREETYPE2_PREFIX)/lib"/libfreetype*.so* "$(DESTDIR)$(bindir)/lib/"
endif
# FIXME: need transitive deps (libbrotlidec, libbrotlicommon, libharfbuzz, etc)
#	$(if $(SDL3_STATIC),,@cp -P "$(FREETYPE2_PREFIX)/lib"/libfreetype*.so* "$(DESTDIR)$(bindir)/lib/")

# install hooks
install-exec-hook: install-libs
	cd "$(DESTDIR)$(bindir)" && \
	$(LN_S) -rf $(PROGRAMS) McEngine && \
	$(LN_S) -rf $(PROGRAMS) McOsu

uninstall-hook:
	rm -rf "$(DESTDIR)$(bindir)/"

# cleanup targets
clean-local:
	rm -rf $(builddir)/build/obj
	rm -f $(PROGRAMS)

clean-deps:
	rm -rf build/deps
.PHONY: clean-deps install-libs

maintainer-clean-local: clean-deps

distclean-local: clean-deps

# TODO: distribution packaging
dist-hook:
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/lib $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_DIR)/include $(distdir)/$(BUNDLED_BASS_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/lib $(distdir)/$(BUNDLED_BASS_FX_DIR)/
	cp -r $(srcdir)/$(BUNDLED_BASS_FX_DIR)/include $(distdir)/$(BUNDLED_BASS_FX_DIR)/
	cp -r $(srcdir)/$(ASSETS_DIR)/models $(distdir)/
	cp -r $(srcdir)/$(ASSETS_DIR)/shaders $(distdir)/
	find $(distdir) -type f -name ".git*" -delete
	find $(distdir) -type f -name "*.a" -delete
	find $(distdir) -type f -name "*.dll" -delete
	find $(distdir) -type f -name "*.dylib" -delete

# TODO: distribution package files
EXTRA_DIST = \
	$(BUNDLED_BASS_DIR)/include \
	$(BUNDLED_BASS_FX_DIR)/include \
	$(BUNDLED_BASS_DIR)/lib/linux/libbass.so \
	$(BUNDLED_BASS_FX_DIR)/lib/linux/libbass_fx.so \
	$(ASSETS_DIR)/models \
	$(ASSETS_DIR)/shaders \
	autogen.sh

MAINTAINERCLEANFILES = $(top_srcdir)/src/Makefile.sources
